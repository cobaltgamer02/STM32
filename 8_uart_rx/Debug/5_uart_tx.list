
5_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000021c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a4  080003ac  000013ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a4  080003a4  000013ac  2**0
                  CONTENTS
  4 .ARM          00000000  080003a4  080003a4  000013ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a4  080003ac  000013ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a4  080003a4  000013a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003a8  080003a8  000013a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000013ac  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000425  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000016e  00000000  00000000  00001801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00001970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000045  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181d5  00000000  00000000  00001a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000066e  00000000  00000000  00019bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000884be  00000000  00000000  0001a260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a271e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000e8  00000000  00000000  000a2764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  000a284c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800038c 	.word	0x0800038c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	0800038c 	.word	0x0800038c

080001c8 <main>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate);
void uart2_tx_init(void);
void uart2_write(int ch);

int main() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	while (1) {
		uart2_tx_init();
 80001cc:	f000 f806 	bl	80001dc <uart2_tx_init>
		uart2_write('C');
 80001d0:	2043      	movs	r0, #67	@ 0x43
 80001d2:	f000 f84f 	bl	8000274 <uart2_write>
		uart2_tx_init();
 80001d6:	bf00      	nop
 80001d8:	e7f8      	b.n	80001cc <main+0x4>
	...

080001dc <uart2_tx_init>:
	}
}

void uart2_tx_init(void){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//----Configure uart gpio pin ----
	//Enable clock access for gpioa
	RCC->AHB1ENR |= GPIOAEN;
 80001e0:	4b20      	ldr	r3, [pc, #128]	@ (8000264 <uart2_tx_init+0x88>)
 80001e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e4:	4a1f      	ldr	r2, [pc, #124]	@ (8000264 <uart2_tx_init+0x88>)
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	6313      	str	r3, [r2, #48]	@ 0x30
	//Set PA2 mode to alternate function mode
	GPIOA->MODER &=~(1U<<4);
 80001ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000268 <uart2_tx_init+0x8c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000268 <uart2_tx_init+0x8c>)
 80001f2:	f023 0310 	bic.w	r3, r3, #16
 80001f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80001f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000268 <uart2_tx_init+0x8c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a1a      	ldr	r2, [pc, #104]	@ (8000268 <uart2_tx_init+0x8c>)
 80001fe:	f043 0320 	orr.w	r3, r3, #32
 8000202:	6013      	str	r3, [r2, #0]
	//Set PA2 Alternate function type to UART_TX (AF07)
	GPIOA->AFR[0] |= (1U<<8);
 8000204:	4b18      	ldr	r3, [pc, #96]	@ (8000268 <uart2_tx_init+0x8c>)
 8000206:	6a1b      	ldr	r3, [r3, #32]
 8000208:	4a17      	ldr	r2, [pc, #92]	@ (8000268 <uart2_tx_init+0x8c>)
 800020a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800020e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000210:	4b15      	ldr	r3, [pc, #84]	@ (8000268 <uart2_tx_init+0x8c>)
 8000212:	6a1b      	ldr	r3, [r3, #32]
 8000214:	4a14      	ldr	r2, [pc, #80]	@ (8000268 <uart2_tx_init+0x8c>)
 8000216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800021a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 800021c:	4b12      	ldr	r3, [pc, #72]	@ (8000268 <uart2_tx_init+0x8c>)
 800021e:	6a1b      	ldr	r3, [r3, #32]
 8000220:	4a11      	ldr	r2, [pc, #68]	@ (8000268 <uart2_tx_init+0x8c>)
 8000222:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000226:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000228:	4b0f      	ldr	r3, [pc, #60]	@ (8000268 <uart2_tx_init+0x8c>)
 800022a:	6a1b      	ldr	r3, [r3, #32]
 800022c:	4a0e      	ldr	r2, [pc, #56]	@ (8000268 <uart2_tx_init+0x8c>)
 800022e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000232:	6213      	str	r3, [r2, #32]

	//---Configure uart module----
	//Enable clock access to uart2
	RCC->APB1ENR |= UART2EN;
 8000234:	4b0b      	ldr	r3, [pc, #44]	@ (8000264 <uart2_tx_init+0x88>)
 8000236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000238:	4a0a      	ldr	r2, [pc, #40]	@ (8000264 <uart2_tx_init+0x88>)
 800023a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800023e:	6413      	str	r3, [r2, #64]	@ 0x40
	//Configure baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000240:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000244:	4909      	ldr	r1, [pc, #36]	@ (800026c <uart2_tx_init+0x90>)
 8000246:	480a      	ldr	r0, [pc, #40]	@ (8000270 <uart2_tx_init+0x94>)
 8000248:	f000 f82c 	bl	80002a4 <uart_set_baudrate>
	//Configure the transfer direction
	USART2->CR1 = CR1_TE;
 800024c:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <uart2_tx_init+0x94>)
 800024e:	2208      	movs	r2, #8
 8000250:	60da      	str	r2, [r3, #12]
	//Enable uart module
	USART2->CR1 |= CR1_UE;
 8000252:	4b07      	ldr	r3, [pc, #28]	@ (8000270 <uart2_tx_init+0x94>)
 8000254:	68db      	ldr	r3, [r3, #12]
 8000256:	4a06      	ldr	r2, [pc, #24]	@ (8000270 <uart2_tx_init+0x94>)
 8000258:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800025c:	60d3      	str	r3, [r2, #12]
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40023800 	.word	0x40023800
 8000268:	40020000 	.word	0x40020000
 800026c:	00f42400 	.word	0x00f42400
 8000270:	40004400 	.word	0x40004400

08000274 <uart2_write>:

void uart2_write(int ch){
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	//Make sure the transmit data register is empty
	while(!(USART2->SR &SR_TXE)){}
 800027c:	bf00      	nop
 800027e:	4b08      	ldr	r3, [pc, #32]	@ (80002a0 <uart2_write+0x2c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000286:	2b00      	cmp	r3, #0
 8000288:	d0f9      	beq.n	800027e <uart2_write+0xa>
	//Write to transmit data register
	USART2->DR = (ch & 0xFF);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a04      	ldr	r2, [pc, #16]	@ (80002a0 <uart2_write+0x2c>)
 800028e:	b2db      	uxtb	r3, r3
 8000290:	6053      	str	r3, [r2, #4]
}
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40004400 	.word	0x40004400

080002a4 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
 80002b0:	6879      	ldr	r1, [r7, #4]
 80002b2:	68b8      	ldr	r0, [r7, #8]
 80002b4:	f000 f808 	bl	80002c8 <compute_uart_bd>
 80002b8:	4603      	mov	r3, r0
 80002ba:	461a      	mov	r2, r3
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	609a      	str	r2, [r3, #8]
}
 80002c0:	bf00      	nop
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate){
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	6039      	str	r1, [r7, #0]
	return ( (PeriphClk+(Baudrate/2U))/Baudrate);
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	085a      	lsrs	r2, r3, #1
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	441a      	add	r2, r3
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80002e0:	b29b      	uxth	r3, r3
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
	...

080002f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f0:	480d      	ldr	r0, [pc, #52]	@ (8000328 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f8:	480c      	ldr	r0, [pc, #48]	@ (800032c <LoopForever+0x6>)
  ldr r1, =_edata
 80002fa:	490d      	ldr	r1, [pc, #52]	@ (8000330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000334 <LoopForever+0xe>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000300:	e002      	b.n	8000308 <LoopCopyDataInit>

08000302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000306:	3304      	adds	r3, #4

08000308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800030c:	d3f9      	bcc.n	8000302 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030e:	4a0a      	ldr	r2, [pc, #40]	@ (8000338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000310:	4c0a      	ldr	r4, [pc, #40]	@ (800033c <LoopForever+0x16>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000314:	e001      	b.n	800031a <LoopFillZerobss>

08000316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000318:	3204      	adds	r2, #4

0800031a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800031c:	d3fb      	bcc.n	8000316 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031e:	f000 f811 	bl	8000344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000322:	f7ff ff51 	bl	80001c8 <main>

08000326 <LoopForever>:

LoopForever:
  b LoopForever
 8000326:	e7fe      	b.n	8000326 <LoopForever>
  ldr   r0, =_estack
 8000328:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800032c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000330:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000334:	080003ac 	.word	0x080003ac
  ldr r2, =_sbss
 8000338:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800033c:	2000001c 	.word	0x2000001c

08000340 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000340:	e7fe      	b.n	8000340 <ADC_IRQHandler>
	...

08000344 <__libc_init_array>:
 8000344:	b570      	push	{r4, r5, r6, lr}
 8000346:	4d0d      	ldr	r5, [pc, #52]	@ (800037c <__libc_init_array+0x38>)
 8000348:	4c0d      	ldr	r4, [pc, #52]	@ (8000380 <__libc_init_array+0x3c>)
 800034a:	1b64      	subs	r4, r4, r5
 800034c:	10a4      	asrs	r4, r4, #2
 800034e:	2600      	movs	r6, #0
 8000350:	42a6      	cmp	r6, r4
 8000352:	d109      	bne.n	8000368 <__libc_init_array+0x24>
 8000354:	4d0b      	ldr	r5, [pc, #44]	@ (8000384 <__libc_init_array+0x40>)
 8000356:	4c0c      	ldr	r4, [pc, #48]	@ (8000388 <__libc_init_array+0x44>)
 8000358:	f000 f818 	bl	800038c <_init>
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	10a4      	asrs	r4, r4, #2
 8000360:	2600      	movs	r6, #0
 8000362:	42a6      	cmp	r6, r4
 8000364:	d105      	bne.n	8000372 <__libc_init_array+0x2e>
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f855 3b04 	ldr.w	r3, [r5], #4
 800036c:	4798      	blx	r3
 800036e:	3601      	adds	r6, #1
 8000370:	e7ee      	b.n	8000350 <__libc_init_array+0xc>
 8000372:	f855 3b04 	ldr.w	r3, [r5], #4
 8000376:	4798      	blx	r3
 8000378:	3601      	adds	r6, #1
 800037a:	e7f2      	b.n	8000362 <__libc_init_array+0x1e>
 800037c:	080003a4 	.word	0x080003a4
 8000380:	080003a4 	.word	0x080003a4
 8000384:	080003a4 	.word	0x080003a4
 8000388:	080003a8 	.word	0x080003a8

0800038c <_init>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr

08000398 <_fini>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr
