
15_input_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001384  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001514  08001514  00002514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001558  08001558  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001558  08001558  00002558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001560  08001560  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001560  08001560  00002560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001564  08001564  00002564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001568  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000179c  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000693  00000000  00000000  00004828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00004ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000117  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002006  00000000  00000000  0000516f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002504  00000000  00000000  00007175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e673  00000000  00000000  00009679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00097cec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c6c  00000000  00000000  00097d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0009899c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080014fc 	.word	0x080014fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080014fc 	.word	0x080014fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	db0b      	blt.n	800029a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 021f 	and.w	r2, r3, #31
 8000288:	4907      	ldr	r1, [pc, #28]	@ (80002a8 <__NVIC_EnableIRQ+0x38>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <pa3_exti_init>:
#include "exti.h"

#define GPIOAEN 				(1U<<0)
#define SYSCFGEN			(1U<<14)

void pa3_exti_init(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002b0:	b672      	cpsid	i
}
 80002b2:	bf00      	nop
	//Disable global interrupts (optional but good practice)
	__disable_irq();
	//Enable clock access for GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80002b4:	4b21      	ldr	r3, [pc, #132]	@ (800033c <pa3_exti_init+0x90>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b8:	4a20      	ldr	r2, [pc, #128]	@ (800033c <pa3_exti_init+0x90>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	@ 0x30
	//Set PA0 as input
	GPIOA->MODER &= ~(1U<<0);
 80002c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000340 <pa3_exti_init+0x94>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a1e      	ldr	r2, [pc, #120]	@ (8000340 <pa3_exti_init+0x94>)
 80002c6:	f023 0301 	bic.w	r3, r3, #1
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<1);
 80002cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000340 <pa3_exti_init+0x94>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000340 <pa3_exti_init+0x94>)
 80002d2:	f023 0302 	bic.w	r3, r3, #2
 80002d6:	6013      	str	r3, [r2, #0]
	//Enable clock access to SYSCFG
	RCC->APB2ENR |= SYSCFGEN;
 80002d8:	4b18      	ldr	r3, [pc, #96]	@ (800033c <pa3_exti_init+0x90>)
 80002da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002dc:	4a17      	ldr	r2, [pc, #92]	@ (800033c <pa3_exti_init+0x90>)
 80002de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002e2:	6453      	str	r3, [r2, #68]	@ 0x44
	//Select Port A for EXTI0
	SYSCFG->EXTICR[0]	&= ~(1U<<0);
 80002e4:	4b17      	ldr	r3, [pc, #92]	@ (8000344 <pa3_exti_init+0x98>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	4a16      	ldr	r2, [pc, #88]	@ (8000344 <pa3_exti_init+0x98>)
 80002ea:	f023 0301 	bic.w	r3, r3, #1
 80002ee:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0]	&= ~(1U<<1);
 80002f0:	4b14      	ldr	r3, [pc, #80]	@ (8000344 <pa3_exti_init+0x98>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a13      	ldr	r2, [pc, #76]	@ (8000344 <pa3_exti_init+0x98>)
 80002f6:	f023 0302 	bic.w	r3, r3, #2
 80002fa:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0]	&= ~(1U<<2);
 80002fc:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <pa3_exti_init+0x98>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	4a10      	ldr	r2, [pc, #64]	@ (8000344 <pa3_exti_init+0x98>)
 8000302:	f023 0304 	bic.w	r3, r3, #4
 8000306:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0]	&= ~(1U<<3);
 8000308:	4b0e      	ldr	r3, [pc, #56]	@ (8000344 <pa3_exti_init+0x98>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	4a0d      	ldr	r2, [pc, #52]	@ (8000344 <pa3_exti_init+0x98>)
 800030e:	f023 0308 	bic.w	r3, r3, #8
 8000312:	6093      	str	r3, [r2, #8]
	//Unmask EXTI0
	EXTI->IMR |= (1U<<0);
 8000314:	4b0c      	ldr	r3, [pc, #48]	@ (8000348 <pa3_exti_init+0x9c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a0b      	ldr	r2, [pc, #44]	@ (8000348 <pa3_exti_init+0x9c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]
	//Select falling edge trigger
	EXTI->FTSR |= (1U<<0);
 8000320:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <pa3_exti_init+0x9c>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	4a08      	ldr	r2, [pc, #32]	@ (8000348 <pa3_exti_init+0x9c>)
 8000326:	f043 0301 	orr.w	r3, r3, #1
 800032a:	60d3      	str	r3, [r2, #12]
	//Enable EXTI0 line in NVIC
	NVIC_EnableIRQ(EXTI0_IRQn);
 800032c:	2006      	movs	r0, #6
 800032e:	f7ff ff9f 	bl	8000270 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000332:	b662      	cpsie	i
}
 8000334:	bf00      	nop
	//Enable global interrupts
	__enable_irq();
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40023800 	.word	0x40023800
 8000340:	40020000 	.word	0x40020000
 8000344:	40013800 	.word	0x40013800
 8000348:	40013c00 	.word	0x40013c00

0800034c <main>:
#define PIN12											   (1U<<12)
#define LED_PIN										PIN12

static void exti_callback(void);

int main() {
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	//1. Give clock access to GPIOD
	RCC->AHB1ENR |= GPIODEN;
 8000350:	4b0b      	ldr	r3, [pc, #44]	@ (8000380 <main+0x34>)
 8000352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000354:	4a0a      	ldr	r2, [pc, #40]	@ (8000380 <main+0x34>)
 8000356:	f043 0308 	orr.w	r3, r3, #8
 800035a:	6313      	str	r3, [r2, #48]	@ 0x30
	// 2. Set PD12 as output pin
	GPIOD->MODER |= (1U<<24);
 800035c:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <main+0x38>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a08      	ldr	r2, [pc, #32]	@ (8000384 <main+0x38>)
 8000362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000366:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1U<<25);
 8000368:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <main+0x38>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a05      	ldr	r2, [pc, #20]	@ (8000384 <main+0x38>)
 800036e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000372:	6013      	str	r3, [r2, #0]

	pa3_exti_init();
 8000374:	f7ff ff9a 	bl	80002ac <pa3_exti_init>
	uart2_tx_init();
 8000378:	f000 f8dc 	bl	8000534 <uart2_tx_init>

	while (1) {
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <main+0x30>
 8000380:	40023800 	.word	0x40023800
 8000384:	40020c00 	.word	0x40020c00

08000388 <exti_callback>:

	}
}

static void exti_callback(void){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	printf("BTN pressed...\n\r");
 800038c:	4805      	ldr	r0, [pc, #20]	@ (80003a4 <exti_callback+0x1c>)
 800038e:	f000 fa47 	bl	8000820 <iprintf>
	GPIOD->ODR ^= LED_PIN;
 8000392:	4b05      	ldr	r3, [pc, #20]	@ (80003a8 <exti_callback+0x20>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a04      	ldr	r2, [pc, #16]	@ (80003a8 <exti_callback+0x20>)
 8000398:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800039c:	6153      	str	r3, [r2, #20]
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	08001514 	.word	0x08001514
 80003a8:	40020c00 	.word	0x40020c00

080003ac <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	if((EXTI->PR & (1U<<0)) != 0){
 80003b0:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <EXTI0_IRQHandler+0x24>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	f003 0301 	and.w	r3, r3, #1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d007      	beq.n	80003cc <EXTI0_IRQHandler+0x20>
		//Clear The PR flag
		EXTI-> PR |= (1U<<0);
 80003bc:	4b04      	ldr	r3, [pc, #16]	@ (80003d0 <EXTI0_IRQHandler+0x24>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	4a03      	ldr	r2, [pc, #12]	@ (80003d0 <EXTI0_IRQHandler+0x24>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6153      	str	r3, [r2, #20]
		//Do something
		exti_callback();
 80003c8:	f7ff ffde 	bl	8000388 <exti_callback>
	}
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40013c00 	.word	0x40013c00

080003d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	e00a      	b.n	80003fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003e6:	f3af 8000 	nop.w
 80003ea:	4601      	mov	r1, r0
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	1c5a      	adds	r2, r3, #1
 80003f0:	60ba      	str	r2, [r7, #8]
 80003f2:	b2ca      	uxtb	r2, r1
 80003f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	3301      	adds	r3, #1
 80003fa:	617b      	str	r3, [r7, #20]
 80003fc:	697a      	ldr	r2, [r7, #20]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	429a      	cmp	r2, r3
 8000402:	dbf0      	blt.n	80003e6 <_read+0x12>
  }

  return len;
 8000404:	687b      	ldr	r3, [r7, #4]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3718      	adds	r7, #24
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b086      	sub	sp, #24
 8000412:	af00      	add	r7, sp, #0
 8000414:	60f8      	str	r0, [r7, #12]
 8000416:	60b9      	str	r1, [r7, #8]
 8000418:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]
 800041e:	e009      	b.n	8000434 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	1c5a      	adds	r2, r3, #1
 8000424:	60ba      	str	r2, [r7, #8]
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	4618      	mov	r0, r3
 800042a:	f000 f877 	bl	800051c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	3301      	adds	r3, #1
 8000432:	617b      	str	r3, [r7, #20]
 8000434:	697a      	ldr	r2, [r7, #20]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	429a      	cmp	r2, r3
 800043a:	dbf1      	blt.n	8000420 <_write+0x12>
  }
  return len;
 800043c:	687b      	ldr	r3, [r7, #4]
}
 800043e:	4618      	mov	r0, r3
 8000440:	3718      	adds	r7, #24
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <_close>:

int _close(int file)
{
 8000446:	b480      	push	{r7}
 8000448:	b083      	sub	sp, #12
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000452:	4618      	mov	r0, r3
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800046e:	605a      	str	r2, [r3, #4]
  return 0;
 8000470:	2300      	movs	r3, #0
}
 8000472:	4618      	mov	r0, r3
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr

0800047e <_isatty>:

int _isatty(int file)
{
 800047e:	b480      	push	{r7}
 8000480:	b083      	sub	sp, #12
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000486:	2301      	movs	r3, #1
}
 8000488:	4618      	mov	r0, r3
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
	...

080004b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004b8:	4a14      	ldr	r2, [pc, #80]	@ (800050c <_sbrk+0x5c>)
 80004ba:	4b15      	ldr	r3, [pc, #84]	@ (8000510 <_sbrk+0x60>)
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004c4:	4b13      	ldr	r3, [pc, #76]	@ (8000514 <_sbrk+0x64>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d102      	bne.n	80004d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004cc:	4b11      	ldr	r3, [pc, #68]	@ (8000514 <_sbrk+0x64>)
 80004ce:	4a12      	ldr	r2, [pc, #72]	@ (8000518 <_sbrk+0x68>)
 80004d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004d2:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <_sbrk+0x64>)
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4413      	add	r3, r2
 80004da:	693a      	ldr	r2, [r7, #16]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d207      	bcs.n	80004f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004e0:	f000 fa42 	bl	8000968 <__errno>
 80004e4:	4603      	mov	r3, r0
 80004e6:	220c      	movs	r2, #12
 80004e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295
 80004ee:	e009      	b.n	8000504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004f0:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <_sbrk+0x64>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004f6:	4b07      	ldr	r3, [pc, #28]	@ (8000514 <_sbrk+0x64>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4413      	add	r3, r2
 80004fe:	4a05      	ldr	r2, [pc, #20]	@ (8000514 <_sbrk+0x64>)
 8000500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000502:	68fb      	ldr	r3, [r7, #12]
}
 8000504:	4618      	mov	r0, r3
 8000506:	3718      	adds	r7, #24
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20020000 	.word	0x20020000
 8000510:	00000400 	.word	0x00000400
 8000514:	20000078 	.word	0x20000078
 8000518:	200001c8 	.word	0x200001c8

0800051c <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate);


void uart2_write(int ch);

int __io_putchar(int ch){
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 f851 	bl	80005cc <uart2_write>
	return ch;
 800052a:	687b      	ldr	r3, [r7, #4]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <uart2_tx_init>:
	//Enable uart module
	USART2->CR1 |= CR1_UE;
}


void uart2_tx_init(void){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	//----Configure uart gpio pin ----
	//Enable clock access for gpioa
	RCC->AHB1ENR |= GPIOAEN;
 8000538:	4b20      	ldr	r3, [pc, #128]	@ (80005bc <uart2_tx_init+0x88>)
 800053a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053c:	4a1f      	ldr	r2, [pc, #124]	@ (80005bc <uart2_tx_init+0x88>)
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6313      	str	r3, [r2, #48]	@ 0x30
	//Set PA2 mode to alternate function mode
	GPIOA->MODER &=~(1U<<4);
 8000544:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <uart2_tx_init+0x8c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a1d      	ldr	r2, [pc, #116]	@ (80005c0 <uart2_tx_init+0x8c>)
 800054a:	f023 0310 	bic.w	r3, r3, #16
 800054e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000550:	4b1b      	ldr	r3, [pc, #108]	@ (80005c0 <uart2_tx_init+0x8c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a1a      	ldr	r2, [pc, #104]	@ (80005c0 <uart2_tx_init+0x8c>)
 8000556:	f043 0320 	orr.w	r3, r3, #32
 800055a:	6013      	str	r3, [r2, #0]
	//Set PA2 Alternate function type to UART_TX (AF07)
	GPIOA->AFR[0] |= (1U<<8);
 800055c:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <uart2_tx_init+0x8c>)
 800055e:	6a1b      	ldr	r3, [r3, #32]
 8000560:	4a17      	ldr	r2, [pc, #92]	@ (80005c0 <uart2_tx_init+0x8c>)
 8000562:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000566:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000568:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <uart2_tx_init+0x8c>)
 800056a:	6a1b      	ldr	r3, [r3, #32]
 800056c:	4a14      	ldr	r2, [pc, #80]	@ (80005c0 <uart2_tx_init+0x8c>)
 800056e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000572:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <uart2_tx_init+0x8c>)
 8000576:	6a1b      	ldr	r3, [r3, #32]
 8000578:	4a11      	ldr	r2, [pc, #68]	@ (80005c0 <uart2_tx_init+0x8c>)
 800057a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800057e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000580:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <uart2_tx_init+0x8c>)
 8000582:	6a1b      	ldr	r3, [r3, #32]
 8000584:	4a0e      	ldr	r2, [pc, #56]	@ (80005c0 <uart2_tx_init+0x8c>)
 8000586:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800058a:	6213      	str	r3, [r2, #32]

	//---Configure uart module----
	//Enable clock access to uart2
	RCC->APB1ENR |= UART2EN;
 800058c:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <uart2_tx_init+0x88>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	4a0a      	ldr	r2, [pc, #40]	@ (80005bc <uart2_tx_init+0x88>)
 8000592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000596:	6413      	str	r3, [r2, #64]	@ 0x40
	//Configure baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000598:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800059c:	4909      	ldr	r1, [pc, #36]	@ (80005c4 <uart2_tx_init+0x90>)
 800059e:	480a      	ldr	r0, [pc, #40]	@ (80005c8 <uart2_tx_init+0x94>)
 80005a0:	f000 f82c 	bl	80005fc <uart_set_baudrate>
	//Configure the transfer direction
	USART2->CR1 = CR1_TE;
 80005a4:	4b08      	ldr	r3, [pc, #32]	@ (80005c8 <uart2_tx_init+0x94>)
 80005a6:	2208      	movs	r2, #8
 80005a8:	60da      	str	r2, [r3, #12]
	//Enable uart module
	USART2->CR1 |= CR1_UE;
 80005aa:	4b07      	ldr	r3, [pc, #28]	@ (80005c8 <uart2_tx_init+0x94>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	4a06      	ldr	r2, [pc, #24]	@ (80005c8 <uart2_tx_init+0x94>)
 80005b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005b4:	60d3      	str	r3, [r2, #12]
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40020000 	.word	0x40020000
 80005c4:	00f42400 	.word	0x00f42400
 80005c8:	40004400 	.word	0x40004400

080005cc <uart2_write>:
	while(!(USART2->SR &SR_RXNE)){}
	//read data
	return USART2->DR;
}

void uart2_write(int ch){
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	//Make sure the transmit data register is empty
	while(!(USART2->SR &SR_TXE)){}
 80005d4:	bf00      	nop
 80005d6:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <uart2_write+0x2c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0f9      	beq.n	80005d6 <uart2_write+0xa>
	//Write to transmit data register
	USART2->DR = (ch & 0xFF);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a04      	ldr	r2, [pc, #16]	@ (80005f8 <uart2_write+0x2c>)
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	6053      	str	r3, [r2, #4]
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40004400 	.word	0x40004400

080005fc <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	68b8      	ldr	r0, [r7, #8]
 800060c:	f000 f808 	bl	8000620 <compute_uart_bd>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	609a      	str	r2, [r3, #8]
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate){
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
	return ( (PeriphClk+(Baudrate/2U))/Baudrate);
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	085a      	lsrs	r2, r3, #1
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	441a      	add	r2, r3
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	fbb2 f3f3 	udiv	r3, r2, r3
 8000638:	b29b      	uxth	r3, r3
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
	...

08000648 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000648:	480d      	ldr	r0, [pc, #52]	@ (8000680 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800064c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <LoopForever+0x6>)
  ldr r1, =_edata
 8000652:	490d      	ldr	r1, [pc, #52]	@ (8000688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000654:	4a0d      	ldr	r2, [pc, #52]	@ (800068c <LoopForever+0xe>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a0a      	ldr	r2, [pc, #40]	@ (8000690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000668:	4c0a      	ldr	r4, [pc, #40]	@ (8000694 <LoopForever+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000676:	f000 f97d 	bl	8000974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067a:	f7ff fe67 	bl	800034c <main>

0800067e <LoopForever>:

LoopForever:
  b LoopForever
 800067e:	e7fe      	b.n	800067e <LoopForever>
  ldr   r0, =_estack
 8000680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800068c:	08001568 	.word	0x08001568
  ldr r2, =_sbss
 8000690:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000694:	200001c8 	.word	0x200001c8

08000698 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC_IRQHandler>
	...

0800069c <std>:
 800069c:	2300      	movs	r3, #0
 800069e:	b510      	push	{r4, lr}
 80006a0:	4604      	mov	r4, r0
 80006a2:	e9c0 3300 	strd	r3, r3, [r0]
 80006a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006aa:	6083      	str	r3, [r0, #8]
 80006ac:	8181      	strh	r1, [r0, #12]
 80006ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80006b0:	81c2      	strh	r2, [r0, #14]
 80006b2:	6183      	str	r3, [r0, #24]
 80006b4:	4619      	mov	r1, r3
 80006b6:	2208      	movs	r2, #8
 80006b8:	305c      	adds	r0, #92	@ 0x5c
 80006ba:	f000 f906 	bl	80008ca <memset>
 80006be:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <std+0x58>)
 80006c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80006c2:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <std+0x5c>)
 80006c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006c6:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <std+0x60>)
 80006c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <std+0x64>)
 80006cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <std+0x68>)
 80006d0:	6224      	str	r4, [r4, #32]
 80006d2:	429c      	cmp	r4, r3
 80006d4:	d006      	beq.n	80006e4 <std+0x48>
 80006d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006da:	4294      	cmp	r4, r2
 80006dc:	d002      	beq.n	80006e4 <std+0x48>
 80006de:	33d0      	adds	r3, #208	@ 0xd0
 80006e0:	429c      	cmp	r4, r3
 80006e2:	d105      	bne.n	80006f0 <std+0x54>
 80006e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ec:	f000 b966 	b.w	80009bc <__retarget_lock_init_recursive>
 80006f0:	bd10      	pop	{r4, pc}
 80006f2:	bf00      	nop
 80006f4:	08000845 	.word	0x08000845
 80006f8:	08000867 	.word	0x08000867
 80006fc:	0800089f 	.word	0x0800089f
 8000700:	080008c3 	.word	0x080008c3
 8000704:	2000007c 	.word	0x2000007c

08000708 <stdio_exit_handler>:
 8000708:	4a02      	ldr	r2, [pc, #8]	@ (8000714 <stdio_exit_handler+0xc>)
 800070a:	4903      	ldr	r1, [pc, #12]	@ (8000718 <stdio_exit_handler+0x10>)
 800070c:	4803      	ldr	r0, [pc, #12]	@ (800071c <stdio_exit_handler+0x14>)
 800070e:	f000 b869 	b.w	80007e4 <_fwalk_sglue>
 8000712:	bf00      	nop
 8000714:	20000000 	.word	0x20000000
 8000718:	0800125d 	.word	0x0800125d
 800071c:	20000010 	.word	0x20000010

08000720 <cleanup_stdio>:
 8000720:	6841      	ldr	r1, [r0, #4]
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <cleanup_stdio+0x34>)
 8000724:	4299      	cmp	r1, r3
 8000726:	b510      	push	{r4, lr}
 8000728:	4604      	mov	r4, r0
 800072a:	d001      	beq.n	8000730 <cleanup_stdio+0x10>
 800072c:	f000 fd96 	bl	800125c <_fflush_r>
 8000730:	68a1      	ldr	r1, [r4, #8]
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <cleanup_stdio+0x38>)
 8000734:	4299      	cmp	r1, r3
 8000736:	d002      	beq.n	800073e <cleanup_stdio+0x1e>
 8000738:	4620      	mov	r0, r4
 800073a:	f000 fd8f 	bl	800125c <_fflush_r>
 800073e:	68e1      	ldr	r1, [r4, #12]
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <cleanup_stdio+0x3c>)
 8000742:	4299      	cmp	r1, r3
 8000744:	d004      	beq.n	8000750 <cleanup_stdio+0x30>
 8000746:	4620      	mov	r0, r4
 8000748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800074c:	f000 bd86 	b.w	800125c <_fflush_r>
 8000750:	bd10      	pop	{r4, pc}
 8000752:	bf00      	nop
 8000754:	2000007c 	.word	0x2000007c
 8000758:	200000e4 	.word	0x200000e4
 800075c:	2000014c 	.word	0x2000014c

08000760 <global_stdio_init.part.0>:
 8000760:	b510      	push	{r4, lr}
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <global_stdio_init.part.0+0x30>)
 8000764:	4c0b      	ldr	r4, [pc, #44]	@ (8000794 <global_stdio_init.part.0+0x34>)
 8000766:	4a0c      	ldr	r2, [pc, #48]	@ (8000798 <global_stdio_init.part.0+0x38>)
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	4620      	mov	r0, r4
 800076c:	2200      	movs	r2, #0
 800076e:	2104      	movs	r1, #4
 8000770:	f7ff ff94 	bl	800069c <std>
 8000774:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000778:	2201      	movs	r2, #1
 800077a:	2109      	movs	r1, #9
 800077c:	f7ff ff8e 	bl	800069c <std>
 8000780:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000784:	2202      	movs	r2, #2
 8000786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800078a:	2112      	movs	r1, #18
 800078c:	f7ff bf86 	b.w	800069c <std>
 8000790:	200001b4 	.word	0x200001b4
 8000794:	2000007c 	.word	0x2000007c
 8000798:	08000709 	.word	0x08000709

0800079c <__sfp_lock_acquire>:
 800079c:	4801      	ldr	r0, [pc, #4]	@ (80007a4 <__sfp_lock_acquire+0x8>)
 800079e:	f000 b90e 	b.w	80009be <__retarget_lock_acquire_recursive>
 80007a2:	bf00      	nop
 80007a4:	200001bd 	.word	0x200001bd

080007a8 <__sfp_lock_release>:
 80007a8:	4801      	ldr	r0, [pc, #4]	@ (80007b0 <__sfp_lock_release+0x8>)
 80007aa:	f000 b909 	b.w	80009c0 <__retarget_lock_release_recursive>
 80007ae:	bf00      	nop
 80007b0:	200001bd 	.word	0x200001bd

080007b4 <__sinit>:
 80007b4:	b510      	push	{r4, lr}
 80007b6:	4604      	mov	r4, r0
 80007b8:	f7ff fff0 	bl	800079c <__sfp_lock_acquire>
 80007bc:	6a23      	ldr	r3, [r4, #32]
 80007be:	b11b      	cbz	r3, 80007c8 <__sinit+0x14>
 80007c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007c4:	f7ff bff0 	b.w	80007a8 <__sfp_lock_release>
 80007c8:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <__sinit+0x28>)
 80007ca:	6223      	str	r3, [r4, #32]
 80007cc:	4b04      	ldr	r3, [pc, #16]	@ (80007e0 <__sinit+0x2c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f5      	bne.n	80007c0 <__sinit+0xc>
 80007d4:	f7ff ffc4 	bl	8000760 <global_stdio_init.part.0>
 80007d8:	e7f2      	b.n	80007c0 <__sinit+0xc>
 80007da:	bf00      	nop
 80007dc:	08000721 	.word	0x08000721
 80007e0:	200001b4 	.word	0x200001b4

080007e4 <_fwalk_sglue>:
 80007e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007e8:	4607      	mov	r7, r0
 80007ea:	4688      	mov	r8, r1
 80007ec:	4614      	mov	r4, r2
 80007ee:	2600      	movs	r6, #0
 80007f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007f4:	f1b9 0901 	subs.w	r9, r9, #1
 80007f8:	d505      	bpl.n	8000806 <_fwalk_sglue+0x22>
 80007fa:	6824      	ldr	r4, [r4, #0]
 80007fc:	2c00      	cmp	r4, #0
 80007fe:	d1f7      	bne.n	80007f0 <_fwalk_sglue+0xc>
 8000800:	4630      	mov	r0, r6
 8000802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000806:	89ab      	ldrh	r3, [r5, #12]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d907      	bls.n	800081c <_fwalk_sglue+0x38>
 800080c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000810:	3301      	adds	r3, #1
 8000812:	d003      	beq.n	800081c <_fwalk_sglue+0x38>
 8000814:	4629      	mov	r1, r5
 8000816:	4638      	mov	r0, r7
 8000818:	47c0      	blx	r8
 800081a:	4306      	orrs	r6, r0
 800081c:	3568      	adds	r5, #104	@ 0x68
 800081e:	e7e9      	b.n	80007f4 <_fwalk_sglue+0x10>

08000820 <iprintf>:
 8000820:	b40f      	push	{r0, r1, r2, r3}
 8000822:	b507      	push	{r0, r1, r2, lr}
 8000824:	4906      	ldr	r1, [pc, #24]	@ (8000840 <iprintf+0x20>)
 8000826:	ab04      	add	r3, sp, #16
 8000828:	6808      	ldr	r0, [r1, #0]
 800082a:	f853 2b04 	ldr.w	r2, [r3], #4
 800082e:	6881      	ldr	r1, [r0, #8]
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	f000 f9e9 	bl	8000c08 <_vfiprintf_r>
 8000836:	b003      	add	sp, #12
 8000838:	f85d eb04 	ldr.w	lr, [sp], #4
 800083c:	b004      	add	sp, #16
 800083e:	4770      	bx	lr
 8000840:	2000000c 	.word	0x2000000c

08000844 <__sread>:
 8000844:	b510      	push	{r4, lr}
 8000846:	460c      	mov	r4, r1
 8000848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800084c:	f000 f868 	bl	8000920 <_read_r>
 8000850:	2800      	cmp	r0, #0
 8000852:	bfab      	itete	ge
 8000854:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000856:	89a3      	ldrhlt	r3, [r4, #12]
 8000858:	181b      	addge	r3, r3, r0
 800085a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800085e:	bfac      	ite	ge
 8000860:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000862:	81a3      	strhlt	r3, [r4, #12]
 8000864:	bd10      	pop	{r4, pc}

08000866 <__swrite>:
 8000866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800086a:	461f      	mov	r7, r3
 800086c:	898b      	ldrh	r3, [r1, #12]
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	4605      	mov	r5, r0
 8000872:	460c      	mov	r4, r1
 8000874:	4616      	mov	r6, r2
 8000876:	d505      	bpl.n	8000884 <__swrite+0x1e>
 8000878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800087c:	2302      	movs	r3, #2
 800087e:	2200      	movs	r2, #0
 8000880:	f000 f83c 	bl	80008fc <_lseek_r>
 8000884:	89a3      	ldrh	r3, [r4, #12]
 8000886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800088a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800088e:	81a3      	strh	r3, [r4, #12]
 8000890:	4632      	mov	r2, r6
 8000892:	463b      	mov	r3, r7
 8000894:	4628      	mov	r0, r5
 8000896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800089a:	f000 b853 	b.w	8000944 <_write_r>

0800089e <__sseek>:
 800089e:	b510      	push	{r4, lr}
 80008a0:	460c      	mov	r4, r1
 80008a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008a6:	f000 f829 	bl	80008fc <_lseek_r>
 80008aa:	1c43      	adds	r3, r0, #1
 80008ac:	89a3      	ldrh	r3, [r4, #12]
 80008ae:	bf15      	itete	ne
 80008b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008ba:	81a3      	strheq	r3, [r4, #12]
 80008bc:	bf18      	it	ne
 80008be:	81a3      	strhne	r3, [r4, #12]
 80008c0:	bd10      	pop	{r4, pc}

080008c2 <__sclose>:
 80008c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008c6:	f000 b809 	b.w	80008dc <_close_r>

080008ca <memset>:
 80008ca:	4402      	add	r2, r0
 80008cc:	4603      	mov	r3, r0
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d100      	bne.n	80008d4 <memset+0xa>
 80008d2:	4770      	bx	lr
 80008d4:	f803 1b01 	strb.w	r1, [r3], #1
 80008d8:	e7f9      	b.n	80008ce <memset+0x4>
	...

080008dc <_close_r>:
 80008dc:	b538      	push	{r3, r4, r5, lr}
 80008de:	4d06      	ldr	r5, [pc, #24]	@ (80008f8 <_close_r+0x1c>)
 80008e0:	2300      	movs	r3, #0
 80008e2:	4604      	mov	r4, r0
 80008e4:	4608      	mov	r0, r1
 80008e6:	602b      	str	r3, [r5, #0]
 80008e8:	f7ff fdad 	bl	8000446 <_close>
 80008ec:	1c43      	adds	r3, r0, #1
 80008ee:	d102      	bne.n	80008f6 <_close_r+0x1a>
 80008f0:	682b      	ldr	r3, [r5, #0]
 80008f2:	b103      	cbz	r3, 80008f6 <_close_r+0x1a>
 80008f4:	6023      	str	r3, [r4, #0]
 80008f6:	bd38      	pop	{r3, r4, r5, pc}
 80008f8:	200001b8 	.word	0x200001b8

080008fc <_lseek_r>:
 80008fc:	b538      	push	{r3, r4, r5, lr}
 80008fe:	4d07      	ldr	r5, [pc, #28]	@ (800091c <_lseek_r+0x20>)
 8000900:	4604      	mov	r4, r0
 8000902:	4608      	mov	r0, r1
 8000904:	4611      	mov	r1, r2
 8000906:	2200      	movs	r2, #0
 8000908:	602a      	str	r2, [r5, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	f7ff fdc2 	bl	8000494 <_lseek>
 8000910:	1c43      	adds	r3, r0, #1
 8000912:	d102      	bne.n	800091a <_lseek_r+0x1e>
 8000914:	682b      	ldr	r3, [r5, #0]
 8000916:	b103      	cbz	r3, 800091a <_lseek_r+0x1e>
 8000918:	6023      	str	r3, [r4, #0]
 800091a:	bd38      	pop	{r3, r4, r5, pc}
 800091c:	200001b8 	.word	0x200001b8

08000920 <_read_r>:
 8000920:	b538      	push	{r3, r4, r5, lr}
 8000922:	4d07      	ldr	r5, [pc, #28]	@ (8000940 <_read_r+0x20>)
 8000924:	4604      	mov	r4, r0
 8000926:	4608      	mov	r0, r1
 8000928:	4611      	mov	r1, r2
 800092a:	2200      	movs	r2, #0
 800092c:	602a      	str	r2, [r5, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	f7ff fd50 	bl	80003d4 <_read>
 8000934:	1c43      	adds	r3, r0, #1
 8000936:	d102      	bne.n	800093e <_read_r+0x1e>
 8000938:	682b      	ldr	r3, [r5, #0]
 800093a:	b103      	cbz	r3, 800093e <_read_r+0x1e>
 800093c:	6023      	str	r3, [r4, #0]
 800093e:	bd38      	pop	{r3, r4, r5, pc}
 8000940:	200001b8 	.word	0x200001b8

08000944 <_write_r>:
 8000944:	b538      	push	{r3, r4, r5, lr}
 8000946:	4d07      	ldr	r5, [pc, #28]	@ (8000964 <_write_r+0x20>)
 8000948:	4604      	mov	r4, r0
 800094a:	4608      	mov	r0, r1
 800094c:	4611      	mov	r1, r2
 800094e:	2200      	movs	r2, #0
 8000950:	602a      	str	r2, [r5, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	f7ff fd5b 	bl	800040e <_write>
 8000958:	1c43      	adds	r3, r0, #1
 800095a:	d102      	bne.n	8000962 <_write_r+0x1e>
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	b103      	cbz	r3, 8000962 <_write_r+0x1e>
 8000960:	6023      	str	r3, [r4, #0]
 8000962:	bd38      	pop	{r3, r4, r5, pc}
 8000964:	200001b8 	.word	0x200001b8

08000968 <__errno>:
 8000968:	4b01      	ldr	r3, [pc, #4]	@ (8000970 <__errno+0x8>)
 800096a:	6818      	ldr	r0, [r3, #0]
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	2000000c 	.word	0x2000000c

08000974 <__libc_init_array>:
 8000974:	b570      	push	{r4, r5, r6, lr}
 8000976:	4d0d      	ldr	r5, [pc, #52]	@ (80009ac <__libc_init_array+0x38>)
 8000978:	4c0d      	ldr	r4, [pc, #52]	@ (80009b0 <__libc_init_array+0x3c>)
 800097a:	1b64      	subs	r4, r4, r5
 800097c:	10a4      	asrs	r4, r4, #2
 800097e:	2600      	movs	r6, #0
 8000980:	42a6      	cmp	r6, r4
 8000982:	d109      	bne.n	8000998 <__libc_init_array+0x24>
 8000984:	4d0b      	ldr	r5, [pc, #44]	@ (80009b4 <__libc_init_array+0x40>)
 8000986:	4c0c      	ldr	r4, [pc, #48]	@ (80009b8 <__libc_init_array+0x44>)
 8000988:	f000 fdb8 	bl	80014fc <_init>
 800098c:	1b64      	subs	r4, r4, r5
 800098e:	10a4      	asrs	r4, r4, #2
 8000990:	2600      	movs	r6, #0
 8000992:	42a6      	cmp	r6, r4
 8000994:	d105      	bne.n	80009a2 <__libc_init_array+0x2e>
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f855 3b04 	ldr.w	r3, [r5], #4
 800099c:	4798      	blx	r3
 800099e:	3601      	adds	r6, #1
 80009a0:	e7ee      	b.n	8000980 <__libc_init_array+0xc>
 80009a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009a6:	4798      	blx	r3
 80009a8:	3601      	adds	r6, #1
 80009aa:	e7f2      	b.n	8000992 <__libc_init_array+0x1e>
 80009ac:	08001560 	.word	0x08001560
 80009b0:	08001560 	.word	0x08001560
 80009b4:	08001560 	.word	0x08001560
 80009b8:	08001564 	.word	0x08001564

080009bc <__retarget_lock_init_recursive>:
 80009bc:	4770      	bx	lr

080009be <__retarget_lock_acquire_recursive>:
 80009be:	4770      	bx	lr

080009c0 <__retarget_lock_release_recursive>:
 80009c0:	4770      	bx	lr
	...

080009c4 <_free_r>:
 80009c4:	b538      	push	{r3, r4, r5, lr}
 80009c6:	4605      	mov	r5, r0
 80009c8:	2900      	cmp	r1, #0
 80009ca:	d041      	beq.n	8000a50 <_free_r+0x8c>
 80009cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009d0:	1f0c      	subs	r4, r1, #4
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	bfb8      	it	lt
 80009d6:	18e4      	addlt	r4, r4, r3
 80009d8:	f000 f8e0 	bl	8000b9c <__malloc_lock>
 80009dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a54 <_free_r+0x90>)
 80009de:	6813      	ldr	r3, [r2, #0]
 80009e0:	b933      	cbnz	r3, 80009f0 <_free_r+0x2c>
 80009e2:	6063      	str	r3, [r4, #4]
 80009e4:	6014      	str	r4, [r2, #0]
 80009e6:	4628      	mov	r0, r5
 80009e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009ec:	f000 b8dc 	b.w	8000ba8 <__malloc_unlock>
 80009f0:	42a3      	cmp	r3, r4
 80009f2:	d908      	bls.n	8000a06 <_free_r+0x42>
 80009f4:	6820      	ldr	r0, [r4, #0]
 80009f6:	1821      	adds	r1, r4, r0
 80009f8:	428b      	cmp	r3, r1
 80009fa:	bf01      	itttt	eq
 80009fc:	6819      	ldreq	r1, [r3, #0]
 80009fe:	685b      	ldreq	r3, [r3, #4]
 8000a00:	1809      	addeq	r1, r1, r0
 8000a02:	6021      	streq	r1, [r4, #0]
 8000a04:	e7ed      	b.n	80009e2 <_free_r+0x1e>
 8000a06:	461a      	mov	r2, r3
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	b10b      	cbz	r3, 8000a10 <_free_r+0x4c>
 8000a0c:	42a3      	cmp	r3, r4
 8000a0e:	d9fa      	bls.n	8000a06 <_free_r+0x42>
 8000a10:	6811      	ldr	r1, [r2, #0]
 8000a12:	1850      	adds	r0, r2, r1
 8000a14:	42a0      	cmp	r0, r4
 8000a16:	d10b      	bne.n	8000a30 <_free_r+0x6c>
 8000a18:	6820      	ldr	r0, [r4, #0]
 8000a1a:	4401      	add	r1, r0
 8000a1c:	1850      	adds	r0, r2, r1
 8000a1e:	4283      	cmp	r3, r0
 8000a20:	6011      	str	r1, [r2, #0]
 8000a22:	d1e0      	bne.n	80009e6 <_free_r+0x22>
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	6053      	str	r3, [r2, #4]
 8000a2a:	4408      	add	r0, r1
 8000a2c:	6010      	str	r0, [r2, #0]
 8000a2e:	e7da      	b.n	80009e6 <_free_r+0x22>
 8000a30:	d902      	bls.n	8000a38 <_free_r+0x74>
 8000a32:	230c      	movs	r3, #12
 8000a34:	602b      	str	r3, [r5, #0]
 8000a36:	e7d6      	b.n	80009e6 <_free_r+0x22>
 8000a38:	6820      	ldr	r0, [r4, #0]
 8000a3a:	1821      	adds	r1, r4, r0
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	bf04      	itt	eq
 8000a40:	6819      	ldreq	r1, [r3, #0]
 8000a42:	685b      	ldreq	r3, [r3, #4]
 8000a44:	6063      	str	r3, [r4, #4]
 8000a46:	bf04      	itt	eq
 8000a48:	1809      	addeq	r1, r1, r0
 8000a4a:	6021      	streq	r1, [r4, #0]
 8000a4c:	6054      	str	r4, [r2, #4]
 8000a4e:	e7ca      	b.n	80009e6 <_free_r+0x22>
 8000a50:	bd38      	pop	{r3, r4, r5, pc}
 8000a52:	bf00      	nop
 8000a54:	200001c4 	.word	0x200001c4

08000a58 <sbrk_aligned>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	4e0f      	ldr	r6, [pc, #60]	@ (8000a98 <sbrk_aligned+0x40>)
 8000a5c:	460c      	mov	r4, r1
 8000a5e:	6831      	ldr	r1, [r6, #0]
 8000a60:	4605      	mov	r5, r0
 8000a62:	b911      	cbnz	r1, 8000a6a <sbrk_aligned+0x12>
 8000a64:	f000 fcb6 	bl	80013d4 <_sbrk_r>
 8000a68:	6030      	str	r0, [r6, #0]
 8000a6a:	4621      	mov	r1, r4
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	f000 fcb1 	bl	80013d4 <_sbrk_r>
 8000a72:	1c43      	adds	r3, r0, #1
 8000a74:	d103      	bne.n	8000a7e <sbrk_aligned+0x26>
 8000a76:	f04f 34ff 	mov.w	r4, #4294967295
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	bd70      	pop	{r4, r5, r6, pc}
 8000a7e:	1cc4      	adds	r4, r0, #3
 8000a80:	f024 0403 	bic.w	r4, r4, #3
 8000a84:	42a0      	cmp	r0, r4
 8000a86:	d0f8      	beq.n	8000a7a <sbrk_aligned+0x22>
 8000a88:	1a21      	subs	r1, r4, r0
 8000a8a:	4628      	mov	r0, r5
 8000a8c:	f000 fca2 	bl	80013d4 <_sbrk_r>
 8000a90:	3001      	adds	r0, #1
 8000a92:	d1f2      	bne.n	8000a7a <sbrk_aligned+0x22>
 8000a94:	e7ef      	b.n	8000a76 <sbrk_aligned+0x1e>
 8000a96:	bf00      	nop
 8000a98:	200001c0 	.word	0x200001c0

08000a9c <_malloc_r>:
 8000a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000aa0:	1ccd      	adds	r5, r1, #3
 8000aa2:	f025 0503 	bic.w	r5, r5, #3
 8000aa6:	3508      	adds	r5, #8
 8000aa8:	2d0c      	cmp	r5, #12
 8000aaa:	bf38      	it	cc
 8000aac:	250c      	movcc	r5, #12
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	4606      	mov	r6, r0
 8000ab2:	db01      	blt.n	8000ab8 <_malloc_r+0x1c>
 8000ab4:	42a9      	cmp	r1, r5
 8000ab6:	d904      	bls.n	8000ac2 <_malloc_r+0x26>
 8000ab8:	230c      	movs	r3, #12
 8000aba:	6033      	str	r3, [r6, #0]
 8000abc:	2000      	movs	r0, #0
 8000abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ac2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b98 <_malloc_r+0xfc>
 8000ac6:	f000 f869 	bl	8000b9c <__malloc_lock>
 8000aca:	f8d8 3000 	ldr.w	r3, [r8]
 8000ace:	461c      	mov	r4, r3
 8000ad0:	bb44      	cbnz	r4, 8000b24 <_malloc_r+0x88>
 8000ad2:	4629      	mov	r1, r5
 8000ad4:	4630      	mov	r0, r6
 8000ad6:	f7ff ffbf 	bl	8000a58 <sbrk_aligned>
 8000ada:	1c43      	adds	r3, r0, #1
 8000adc:	4604      	mov	r4, r0
 8000ade:	d158      	bne.n	8000b92 <_malloc_r+0xf6>
 8000ae0:	f8d8 4000 	ldr.w	r4, [r8]
 8000ae4:	4627      	mov	r7, r4
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d143      	bne.n	8000b72 <_malloc_r+0xd6>
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d04b      	beq.n	8000b86 <_malloc_r+0xea>
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	4639      	mov	r1, r7
 8000af2:	4630      	mov	r0, r6
 8000af4:	eb04 0903 	add.w	r9, r4, r3
 8000af8:	f000 fc6c 	bl	80013d4 <_sbrk_r>
 8000afc:	4581      	cmp	r9, r0
 8000afe:	d142      	bne.n	8000b86 <_malloc_r+0xea>
 8000b00:	6821      	ldr	r1, [r4, #0]
 8000b02:	1a6d      	subs	r5, r5, r1
 8000b04:	4629      	mov	r1, r5
 8000b06:	4630      	mov	r0, r6
 8000b08:	f7ff ffa6 	bl	8000a58 <sbrk_aligned>
 8000b0c:	3001      	adds	r0, #1
 8000b0e:	d03a      	beq.n	8000b86 <_malloc_r+0xea>
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	442b      	add	r3, r5
 8000b14:	6023      	str	r3, [r4, #0]
 8000b16:	f8d8 3000 	ldr.w	r3, [r8]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	bb62      	cbnz	r2, 8000b78 <_malloc_r+0xdc>
 8000b1e:	f8c8 7000 	str.w	r7, [r8]
 8000b22:	e00f      	b.n	8000b44 <_malloc_r+0xa8>
 8000b24:	6822      	ldr	r2, [r4, #0]
 8000b26:	1b52      	subs	r2, r2, r5
 8000b28:	d420      	bmi.n	8000b6c <_malloc_r+0xd0>
 8000b2a:	2a0b      	cmp	r2, #11
 8000b2c:	d917      	bls.n	8000b5e <_malloc_r+0xc2>
 8000b2e:	1961      	adds	r1, r4, r5
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	6025      	str	r5, [r4, #0]
 8000b34:	bf18      	it	ne
 8000b36:	6059      	strne	r1, [r3, #4]
 8000b38:	6863      	ldr	r3, [r4, #4]
 8000b3a:	bf08      	it	eq
 8000b3c:	f8c8 1000 	streq.w	r1, [r8]
 8000b40:	5162      	str	r2, [r4, r5]
 8000b42:	604b      	str	r3, [r1, #4]
 8000b44:	4630      	mov	r0, r6
 8000b46:	f000 f82f 	bl	8000ba8 <__malloc_unlock>
 8000b4a:	f104 000b 	add.w	r0, r4, #11
 8000b4e:	1d23      	adds	r3, r4, #4
 8000b50:	f020 0007 	bic.w	r0, r0, #7
 8000b54:	1ac2      	subs	r2, r0, r3
 8000b56:	bf1c      	itt	ne
 8000b58:	1a1b      	subne	r3, r3, r0
 8000b5a:	50a3      	strne	r3, [r4, r2]
 8000b5c:	e7af      	b.n	8000abe <_malloc_r+0x22>
 8000b5e:	6862      	ldr	r2, [r4, #4]
 8000b60:	42a3      	cmp	r3, r4
 8000b62:	bf0c      	ite	eq
 8000b64:	f8c8 2000 	streq.w	r2, [r8]
 8000b68:	605a      	strne	r2, [r3, #4]
 8000b6a:	e7eb      	b.n	8000b44 <_malloc_r+0xa8>
 8000b6c:	4623      	mov	r3, r4
 8000b6e:	6864      	ldr	r4, [r4, #4]
 8000b70:	e7ae      	b.n	8000ad0 <_malloc_r+0x34>
 8000b72:	463c      	mov	r4, r7
 8000b74:	687f      	ldr	r7, [r7, #4]
 8000b76:	e7b6      	b.n	8000ae6 <_malloc_r+0x4a>
 8000b78:	461a      	mov	r2, r3
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	d1fb      	bne.n	8000b78 <_malloc_r+0xdc>
 8000b80:	2300      	movs	r3, #0
 8000b82:	6053      	str	r3, [r2, #4]
 8000b84:	e7de      	b.n	8000b44 <_malloc_r+0xa8>
 8000b86:	230c      	movs	r3, #12
 8000b88:	6033      	str	r3, [r6, #0]
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	f000 f80c 	bl	8000ba8 <__malloc_unlock>
 8000b90:	e794      	b.n	8000abc <_malloc_r+0x20>
 8000b92:	6005      	str	r5, [r0, #0]
 8000b94:	e7d6      	b.n	8000b44 <_malloc_r+0xa8>
 8000b96:	bf00      	nop
 8000b98:	200001c4 	.word	0x200001c4

08000b9c <__malloc_lock>:
 8000b9c:	4801      	ldr	r0, [pc, #4]	@ (8000ba4 <__malloc_lock+0x8>)
 8000b9e:	f7ff bf0e 	b.w	80009be <__retarget_lock_acquire_recursive>
 8000ba2:	bf00      	nop
 8000ba4:	200001bc 	.word	0x200001bc

08000ba8 <__malloc_unlock>:
 8000ba8:	4801      	ldr	r0, [pc, #4]	@ (8000bb0 <__malloc_unlock+0x8>)
 8000baa:	f7ff bf09 	b.w	80009c0 <__retarget_lock_release_recursive>
 8000bae:	bf00      	nop
 8000bb0:	200001bc 	.word	0x200001bc

08000bb4 <__sfputc_r>:
 8000bb4:	6893      	ldr	r3, [r2, #8]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	b410      	push	{r4}
 8000bbc:	6093      	str	r3, [r2, #8]
 8000bbe:	da08      	bge.n	8000bd2 <__sfputc_r+0x1e>
 8000bc0:	6994      	ldr	r4, [r2, #24]
 8000bc2:	42a3      	cmp	r3, r4
 8000bc4:	db01      	blt.n	8000bca <__sfputc_r+0x16>
 8000bc6:	290a      	cmp	r1, #10
 8000bc8:	d103      	bne.n	8000bd2 <__sfputc_r+0x1e>
 8000bca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bce:	f000 bb6d 	b.w	80012ac <__swbuf_r>
 8000bd2:	6813      	ldr	r3, [r2, #0]
 8000bd4:	1c58      	adds	r0, r3, #1
 8000bd6:	6010      	str	r0, [r2, #0]
 8000bd8:	7019      	strb	r1, [r3, #0]
 8000bda:	4608      	mov	r0, r1
 8000bdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <__sfputs_r>:
 8000be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be4:	4606      	mov	r6, r0
 8000be6:	460f      	mov	r7, r1
 8000be8:	4614      	mov	r4, r2
 8000bea:	18d5      	adds	r5, r2, r3
 8000bec:	42ac      	cmp	r4, r5
 8000bee:	d101      	bne.n	8000bf4 <__sfputs_r+0x12>
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	e007      	b.n	8000c04 <__sfputs_r+0x22>
 8000bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bf8:	463a      	mov	r2, r7
 8000bfa:	4630      	mov	r0, r6
 8000bfc:	f7ff ffda 	bl	8000bb4 <__sfputc_r>
 8000c00:	1c43      	adds	r3, r0, #1
 8000c02:	d1f3      	bne.n	8000bec <__sfputs_r+0xa>
 8000c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c08 <_vfiprintf_r>:
 8000c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c0c:	460d      	mov	r5, r1
 8000c0e:	b09d      	sub	sp, #116	@ 0x74
 8000c10:	4614      	mov	r4, r2
 8000c12:	4698      	mov	r8, r3
 8000c14:	4606      	mov	r6, r0
 8000c16:	b118      	cbz	r0, 8000c20 <_vfiprintf_r+0x18>
 8000c18:	6a03      	ldr	r3, [r0, #32]
 8000c1a:	b90b      	cbnz	r3, 8000c20 <_vfiprintf_r+0x18>
 8000c1c:	f7ff fdca 	bl	80007b4 <__sinit>
 8000c20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c22:	07d9      	lsls	r1, r3, #31
 8000c24:	d405      	bmi.n	8000c32 <_vfiprintf_r+0x2a>
 8000c26:	89ab      	ldrh	r3, [r5, #12]
 8000c28:	059a      	lsls	r2, r3, #22
 8000c2a:	d402      	bmi.n	8000c32 <_vfiprintf_r+0x2a>
 8000c2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c2e:	f7ff fec6 	bl	80009be <__retarget_lock_acquire_recursive>
 8000c32:	89ab      	ldrh	r3, [r5, #12]
 8000c34:	071b      	lsls	r3, r3, #28
 8000c36:	d501      	bpl.n	8000c3c <_vfiprintf_r+0x34>
 8000c38:	692b      	ldr	r3, [r5, #16]
 8000c3a:	b99b      	cbnz	r3, 8000c64 <_vfiprintf_r+0x5c>
 8000c3c:	4629      	mov	r1, r5
 8000c3e:	4630      	mov	r0, r6
 8000c40:	f000 fb72 	bl	8001328 <__swsetup_r>
 8000c44:	b170      	cbz	r0, 8000c64 <_vfiprintf_r+0x5c>
 8000c46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c48:	07dc      	lsls	r4, r3, #31
 8000c4a:	d504      	bpl.n	8000c56 <_vfiprintf_r+0x4e>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	b01d      	add	sp, #116	@ 0x74
 8000c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c56:	89ab      	ldrh	r3, [r5, #12]
 8000c58:	0598      	lsls	r0, r3, #22
 8000c5a:	d4f7      	bmi.n	8000c4c <_vfiprintf_r+0x44>
 8000c5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c5e:	f7ff feaf 	bl	80009c0 <__retarget_lock_release_recursive>
 8000c62:	e7f3      	b.n	8000c4c <_vfiprintf_r+0x44>
 8000c64:	2300      	movs	r3, #0
 8000c66:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c68:	2320      	movs	r3, #32
 8000c6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000c6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c72:	2330      	movs	r3, #48	@ 0x30
 8000c74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000e24 <_vfiprintf_r+0x21c>
 8000c78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000c7c:	f04f 0901 	mov.w	r9, #1
 8000c80:	4623      	mov	r3, r4
 8000c82:	469a      	mov	sl, r3
 8000c84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c88:	b10a      	cbz	r2, 8000c8e <_vfiprintf_r+0x86>
 8000c8a:	2a25      	cmp	r2, #37	@ 0x25
 8000c8c:	d1f9      	bne.n	8000c82 <_vfiprintf_r+0x7a>
 8000c8e:	ebba 0b04 	subs.w	fp, sl, r4
 8000c92:	d00b      	beq.n	8000cac <_vfiprintf_r+0xa4>
 8000c94:	465b      	mov	r3, fp
 8000c96:	4622      	mov	r2, r4
 8000c98:	4629      	mov	r1, r5
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	f7ff ffa1 	bl	8000be2 <__sfputs_r>
 8000ca0:	3001      	adds	r0, #1
 8000ca2:	f000 80a7 	beq.w	8000df4 <_vfiprintf_r+0x1ec>
 8000ca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ca8:	445a      	add	r2, fp
 8000caa:	9209      	str	r2, [sp, #36]	@ 0x24
 8000cac:	f89a 3000 	ldrb.w	r3, [sl]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	f000 809f 	beq.w	8000df4 <_vfiprintf_r+0x1ec>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cc0:	f10a 0a01 	add.w	sl, sl, #1
 8000cc4:	9304      	str	r3, [sp, #16]
 8000cc6:	9307      	str	r3, [sp, #28]
 8000cc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000ccc:	931a      	str	r3, [sp, #104]	@ 0x68
 8000cce:	4654      	mov	r4, sl
 8000cd0:	2205      	movs	r2, #5
 8000cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cd6:	4853      	ldr	r0, [pc, #332]	@ (8000e24 <_vfiprintf_r+0x21c>)
 8000cd8:	f7ff fa7a 	bl	80001d0 <memchr>
 8000cdc:	9a04      	ldr	r2, [sp, #16]
 8000cde:	b9d8      	cbnz	r0, 8000d18 <_vfiprintf_r+0x110>
 8000ce0:	06d1      	lsls	r1, r2, #27
 8000ce2:	bf44      	itt	mi
 8000ce4:	2320      	movmi	r3, #32
 8000ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000cea:	0713      	lsls	r3, r2, #28
 8000cec:	bf44      	itt	mi
 8000cee:	232b      	movmi	r3, #43	@ 0x2b
 8000cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8000cf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8000cfa:	d015      	beq.n	8000d28 <_vfiprintf_r+0x120>
 8000cfc:	9a07      	ldr	r2, [sp, #28]
 8000cfe:	4654      	mov	r4, sl
 8000d00:	2000      	movs	r0, #0
 8000d02:	f04f 0c0a 	mov.w	ip, #10
 8000d06:	4621      	mov	r1, r4
 8000d08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d0c:	3b30      	subs	r3, #48	@ 0x30
 8000d0e:	2b09      	cmp	r3, #9
 8000d10:	d94b      	bls.n	8000daa <_vfiprintf_r+0x1a2>
 8000d12:	b1b0      	cbz	r0, 8000d42 <_vfiprintf_r+0x13a>
 8000d14:	9207      	str	r2, [sp, #28]
 8000d16:	e014      	b.n	8000d42 <_vfiprintf_r+0x13a>
 8000d18:	eba0 0308 	sub.w	r3, r0, r8
 8000d1c:	fa09 f303 	lsl.w	r3, r9, r3
 8000d20:	4313      	orrs	r3, r2
 8000d22:	9304      	str	r3, [sp, #16]
 8000d24:	46a2      	mov	sl, r4
 8000d26:	e7d2      	b.n	8000cce <_vfiprintf_r+0xc6>
 8000d28:	9b03      	ldr	r3, [sp, #12]
 8000d2a:	1d19      	adds	r1, r3, #4
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	9103      	str	r1, [sp, #12]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	bfbb      	ittet	lt
 8000d34:	425b      	neglt	r3, r3
 8000d36:	f042 0202 	orrlt.w	r2, r2, #2
 8000d3a:	9307      	strge	r3, [sp, #28]
 8000d3c:	9307      	strlt	r3, [sp, #28]
 8000d3e:	bfb8      	it	lt
 8000d40:	9204      	strlt	r2, [sp, #16]
 8000d42:	7823      	ldrb	r3, [r4, #0]
 8000d44:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d46:	d10a      	bne.n	8000d5e <_vfiprintf_r+0x156>
 8000d48:	7863      	ldrb	r3, [r4, #1]
 8000d4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d4c:	d132      	bne.n	8000db4 <_vfiprintf_r+0x1ac>
 8000d4e:	9b03      	ldr	r3, [sp, #12]
 8000d50:	1d1a      	adds	r2, r3, #4
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	9203      	str	r2, [sp, #12]
 8000d56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000d5a:	3402      	adds	r4, #2
 8000d5c:	9305      	str	r3, [sp, #20]
 8000d5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000e34 <_vfiprintf_r+0x22c>
 8000d62:	7821      	ldrb	r1, [r4, #0]
 8000d64:	2203      	movs	r2, #3
 8000d66:	4650      	mov	r0, sl
 8000d68:	f7ff fa32 	bl	80001d0 <memchr>
 8000d6c:	b138      	cbz	r0, 8000d7e <_vfiprintf_r+0x176>
 8000d6e:	9b04      	ldr	r3, [sp, #16]
 8000d70:	eba0 000a 	sub.w	r0, r0, sl
 8000d74:	2240      	movs	r2, #64	@ 0x40
 8000d76:	4082      	lsls	r2, r0
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	3401      	adds	r4, #1
 8000d7c:	9304      	str	r3, [sp, #16]
 8000d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d82:	4829      	ldr	r0, [pc, #164]	@ (8000e28 <_vfiprintf_r+0x220>)
 8000d84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000d88:	2206      	movs	r2, #6
 8000d8a:	f7ff fa21 	bl	80001d0 <memchr>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	d03f      	beq.n	8000e12 <_vfiprintf_r+0x20a>
 8000d92:	4b26      	ldr	r3, [pc, #152]	@ (8000e2c <_vfiprintf_r+0x224>)
 8000d94:	bb1b      	cbnz	r3, 8000dde <_vfiprintf_r+0x1d6>
 8000d96:	9b03      	ldr	r3, [sp, #12]
 8000d98:	3307      	adds	r3, #7
 8000d9a:	f023 0307 	bic.w	r3, r3, #7
 8000d9e:	3308      	adds	r3, #8
 8000da0:	9303      	str	r3, [sp, #12]
 8000da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000da4:	443b      	add	r3, r7
 8000da6:	9309      	str	r3, [sp, #36]	@ 0x24
 8000da8:	e76a      	b.n	8000c80 <_vfiprintf_r+0x78>
 8000daa:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dae:	460c      	mov	r4, r1
 8000db0:	2001      	movs	r0, #1
 8000db2:	e7a8      	b.n	8000d06 <_vfiprintf_r+0xfe>
 8000db4:	2300      	movs	r3, #0
 8000db6:	3401      	adds	r4, #1
 8000db8:	9305      	str	r3, [sp, #20]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f04f 0c0a 	mov.w	ip, #10
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000dc6:	3a30      	subs	r2, #48	@ 0x30
 8000dc8:	2a09      	cmp	r2, #9
 8000dca:	d903      	bls.n	8000dd4 <_vfiprintf_r+0x1cc>
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0c6      	beq.n	8000d5e <_vfiprintf_r+0x156>
 8000dd0:	9105      	str	r1, [sp, #20]
 8000dd2:	e7c4      	b.n	8000d5e <_vfiprintf_r+0x156>
 8000dd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8000dd8:	4604      	mov	r4, r0
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e7f0      	b.n	8000dc0 <_vfiprintf_r+0x1b8>
 8000dde:	ab03      	add	r3, sp, #12
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	462a      	mov	r2, r5
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <_vfiprintf_r+0x228>)
 8000de6:	a904      	add	r1, sp, #16
 8000de8:	4630      	mov	r0, r6
 8000dea:	f3af 8000 	nop.w
 8000dee:	4607      	mov	r7, r0
 8000df0:	1c78      	adds	r0, r7, #1
 8000df2:	d1d6      	bne.n	8000da2 <_vfiprintf_r+0x19a>
 8000df4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000df6:	07d9      	lsls	r1, r3, #31
 8000df8:	d405      	bmi.n	8000e06 <_vfiprintf_r+0x1fe>
 8000dfa:	89ab      	ldrh	r3, [r5, #12]
 8000dfc:	059a      	lsls	r2, r3, #22
 8000dfe:	d402      	bmi.n	8000e06 <_vfiprintf_r+0x1fe>
 8000e00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e02:	f7ff fddd 	bl	80009c0 <__retarget_lock_release_recursive>
 8000e06:	89ab      	ldrh	r3, [r5, #12]
 8000e08:	065b      	lsls	r3, r3, #25
 8000e0a:	f53f af1f 	bmi.w	8000c4c <_vfiprintf_r+0x44>
 8000e0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e10:	e71e      	b.n	8000c50 <_vfiprintf_r+0x48>
 8000e12:	ab03      	add	r3, sp, #12
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	462a      	mov	r2, r5
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <_vfiprintf_r+0x228>)
 8000e1a:	a904      	add	r1, sp, #16
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	f000 f879 	bl	8000f14 <_printf_i>
 8000e22:	e7e4      	b.n	8000dee <_vfiprintf_r+0x1e6>
 8000e24:	08001525 	.word	0x08001525
 8000e28:	0800152f 	.word	0x0800152f
 8000e2c:	00000000 	.word	0x00000000
 8000e30:	08000be3 	.word	0x08000be3
 8000e34:	0800152b 	.word	0x0800152b

08000e38 <_printf_common>:
 8000e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e3c:	4616      	mov	r6, r2
 8000e3e:	4698      	mov	r8, r3
 8000e40:	688a      	ldr	r2, [r1, #8]
 8000e42:	690b      	ldr	r3, [r1, #16]
 8000e44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	bfb8      	it	lt
 8000e4c:	4613      	movlt	r3, r2
 8000e4e:	6033      	str	r3, [r6, #0]
 8000e50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e54:	4607      	mov	r7, r0
 8000e56:	460c      	mov	r4, r1
 8000e58:	b10a      	cbz	r2, 8000e5e <_printf_common+0x26>
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	6033      	str	r3, [r6, #0]
 8000e5e:	6823      	ldr	r3, [r4, #0]
 8000e60:	0699      	lsls	r1, r3, #26
 8000e62:	bf42      	ittt	mi
 8000e64:	6833      	ldrmi	r3, [r6, #0]
 8000e66:	3302      	addmi	r3, #2
 8000e68:	6033      	strmi	r3, [r6, #0]
 8000e6a:	6825      	ldr	r5, [r4, #0]
 8000e6c:	f015 0506 	ands.w	r5, r5, #6
 8000e70:	d106      	bne.n	8000e80 <_printf_common+0x48>
 8000e72:	f104 0a19 	add.w	sl, r4, #25
 8000e76:	68e3      	ldr	r3, [r4, #12]
 8000e78:	6832      	ldr	r2, [r6, #0]
 8000e7a:	1a9b      	subs	r3, r3, r2
 8000e7c:	42ab      	cmp	r3, r5
 8000e7e:	dc26      	bgt.n	8000ece <_printf_common+0x96>
 8000e80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000e84:	6822      	ldr	r2, [r4, #0]
 8000e86:	3b00      	subs	r3, #0
 8000e88:	bf18      	it	ne
 8000e8a:	2301      	movne	r3, #1
 8000e8c:	0692      	lsls	r2, r2, #26
 8000e8e:	d42b      	bmi.n	8000ee8 <_printf_common+0xb0>
 8000e90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000e94:	4641      	mov	r1, r8
 8000e96:	4638      	mov	r0, r7
 8000e98:	47c8      	blx	r9
 8000e9a:	3001      	adds	r0, #1
 8000e9c:	d01e      	beq.n	8000edc <_printf_common+0xa4>
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	6922      	ldr	r2, [r4, #16]
 8000ea2:	f003 0306 	and.w	r3, r3, #6
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf02      	ittt	eq
 8000eaa:	68e5      	ldreq	r5, [r4, #12]
 8000eac:	6833      	ldreq	r3, [r6, #0]
 8000eae:	1aed      	subeq	r5, r5, r3
 8000eb0:	68a3      	ldr	r3, [r4, #8]
 8000eb2:	bf0c      	ite	eq
 8000eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000eb8:	2500      	movne	r5, #0
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	bfc4      	itt	gt
 8000ebe:	1a9b      	subgt	r3, r3, r2
 8000ec0:	18ed      	addgt	r5, r5, r3
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	341a      	adds	r4, #26
 8000ec6:	42b5      	cmp	r5, r6
 8000ec8:	d11a      	bne.n	8000f00 <_printf_common+0xc8>
 8000eca:	2000      	movs	r0, #0
 8000ecc:	e008      	b.n	8000ee0 <_printf_common+0xa8>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	4652      	mov	r2, sl
 8000ed2:	4641      	mov	r1, r8
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	47c8      	blx	r9
 8000ed8:	3001      	adds	r0, #1
 8000eda:	d103      	bne.n	8000ee4 <_printf_common+0xac>
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee4:	3501      	adds	r5, #1
 8000ee6:	e7c6      	b.n	8000e76 <_printf_common+0x3e>
 8000ee8:	18e1      	adds	r1, r4, r3
 8000eea:	1c5a      	adds	r2, r3, #1
 8000eec:	2030      	movs	r0, #48	@ 0x30
 8000eee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000ef2:	4422      	add	r2, r4
 8000ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000ef8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000efc:	3302      	adds	r3, #2
 8000efe:	e7c7      	b.n	8000e90 <_printf_common+0x58>
 8000f00:	2301      	movs	r3, #1
 8000f02:	4622      	mov	r2, r4
 8000f04:	4641      	mov	r1, r8
 8000f06:	4638      	mov	r0, r7
 8000f08:	47c8      	blx	r9
 8000f0a:	3001      	adds	r0, #1
 8000f0c:	d0e6      	beq.n	8000edc <_printf_common+0xa4>
 8000f0e:	3601      	adds	r6, #1
 8000f10:	e7d9      	b.n	8000ec6 <_printf_common+0x8e>
	...

08000f14 <_printf_i>:
 8000f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f18:	7e0f      	ldrb	r7, [r1, #24]
 8000f1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f1c:	2f78      	cmp	r7, #120	@ 0x78
 8000f1e:	4691      	mov	r9, r2
 8000f20:	4680      	mov	r8, r0
 8000f22:	460c      	mov	r4, r1
 8000f24:	469a      	mov	sl, r3
 8000f26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f2a:	d807      	bhi.n	8000f3c <_printf_i+0x28>
 8000f2c:	2f62      	cmp	r7, #98	@ 0x62
 8000f2e:	d80a      	bhi.n	8000f46 <_printf_i+0x32>
 8000f30:	2f00      	cmp	r7, #0
 8000f32:	f000 80d2 	beq.w	80010da <_printf_i+0x1c6>
 8000f36:	2f58      	cmp	r7, #88	@ 0x58
 8000f38:	f000 80b9 	beq.w	80010ae <_printf_i+0x19a>
 8000f3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f44:	e03a      	b.n	8000fbc <_printf_i+0xa8>
 8000f46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f4a:	2b15      	cmp	r3, #21
 8000f4c:	d8f6      	bhi.n	8000f3c <_printf_i+0x28>
 8000f4e:	a101      	add	r1, pc, #4	@ (adr r1, 8000f54 <_printf_i+0x40>)
 8000f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f54:	08000fad 	.word	0x08000fad
 8000f58:	08000fc1 	.word	0x08000fc1
 8000f5c:	08000f3d 	.word	0x08000f3d
 8000f60:	08000f3d 	.word	0x08000f3d
 8000f64:	08000f3d 	.word	0x08000f3d
 8000f68:	08000f3d 	.word	0x08000f3d
 8000f6c:	08000fc1 	.word	0x08000fc1
 8000f70:	08000f3d 	.word	0x08000f3d
 8000f74:	08000f3d 	.word	0x08000f3d
 8000f78:	08000f3d 	.word	0x08000f3d
 8000f7c:	08000f3d 	.word	0x08000f3d
 8000f80:	080010c1 	.word	0x080010c1
 8000f84:	08000feb 	.word	0x08000feb
 8000f88:	0800107b 	.word	0x0800107b
 8000f8c:	08000f3d 	.word	0x08000f3d
 8000f90:	08000f3d 	.word	0x08000f3d
 8000f94:	080010e3 	.word	0x080010e3
 8000f98:	08000f3d 	.word	0x08000f3d
 8000f9c:	08000feb 	.word	0x08000feb
 8000fa0:	08000f3d 	.word	0x08000f3d
 8000fa4:	08000f3d 	.word	0x08000f3d
 8000fa8:	08001083 	.word	0x08001083
 8000fac:	6833      	ldr	r3, [r6, #0]
 8000fae:	1d1a      	adds	r2, r3, #4
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6032      	str	r2, [r6, #0]
 8000fb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e09d      	b.n	80010fc <_printf_i+0x1e8>
 8000fc0:	6833      	ldr	r3, [r6, #0]
 8000fc2:	6820      	ldr	r0, [r4, #0]
 8000fc4:	1d19      	adds	r1, r3, #4
 8000fc6:	6031      	str	r1, [r6, #0]
 8000fc8:	0606      	lsls	r6, r0, #24
 8000fca:	d501      	bpl.n	8000fd0 <_printf_i+0xbc>
 8000fcc:	681d      	ldr	r5, [r3, #0]
 8000fce:	e003      	b.n	8000fd8 <_printf_i+0xc4>
 8000fd0:	0645      	lsls	r5, r0, #25
 8000fd2:	d5fb      	bpl.n	8000fcc <_printf_i+0xb8>
 8000fd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000fd8:	2d00      	cmp	r5, #0
 8000fda:	da03      	bge.n	8000fe4 <_printf_i+0xd0>
 8000fdc:	232d      	movs	r3, #45	@ 0x2d
 8000fde:	426d      	negs	r5, r5
 8000fe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000fe4:	4859      	ldr	r0, [pc, #356]	@ (800114c <_printf_i+0x238>)
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	e011      	b.n	800100e <_printf_i+0xfa>
 8000fea:	6821      	ldr	r1, [r4, #0]
 8000fec:	6833      	ldr	r3, [r6, #0]
 8000fee:	0608      	lsls	r0, r1, #24
 8000ff0:	f853 5b04 	ldr.w	r5, [r3], #4
 8000ff4:	d402      	bmi.n	8000ffc <_printf_i+0xe8>
 8000ff6:	0649      	lsls	r1, r1, #25
 8000ff8:	bf48      	it	mi
 8000ffa:	b2ad      	uxthmi	r5, r5
 8000ffc:	2f6f      	cmp	r7, #111	@ 0x6f
 8000ffe:	4853      	ldr	r0, [pc, #332]	@ (800114c <_printf_i+0x238>)
 8001000:	6033      	str	r3, [r6, #0]
 8001002:	bf14      	ite	ne
 8001004:	230a      	movne	r3, #10
 8001006:	2308      	moveq	r3, #8
 8001008:	2100      	movs	r1, #0
 800100a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800100e:	6866      	ldr	r6, [r4, #4]
 8001010:	60a6      	str	r6, [r4, #8]
 8001012:	2e00      	cmp	r6, #0
 8001014:	bfa2      	ittt	ge
 8001016:	6821      	ldrge	r1, [r4, #0]
 8001018:	f021 0104 	bicge.w	r1, r1, #4
 800101c:	6021      	strge	r1, [r4, #0]
 800101e:	b90d      	cbnz	r5, 8001024 <_printf_i+0x110>
 8001020:	2e00      	cmp	r6, #0
 8001022:	d04b      	beq.n	80010bc <_printf_i+0x1a8>
 8001024:	4616      	mov	r6, r2
 8001026:	fbb5 f1f3 	udiv	r1, r5, r3
 800102a:	fb03 5711 	mls	r7, r3, r1, r5
 800102e:	5dc7      	ldrb	r7, [r0, r7]
 8001030:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001034:	462f      	mov	r7, r5
 8001036:	42bb      	cmp	r3, r7
 8001038:	460d      	mov	r5, r1
 800103a:	d9f4      	bls.n	8001026 <_printf_i+0x112>
 800103c:	2b08      	cmp	r3, #8
 800103e:	d10b      	bne.n	8001058 <_printf_i+0x144>
 8001040:	6823      	ldr	r3, [r4, #0]
 8001042:	07df      	lsls	r7, r3, #31
 8001044:	d508      	bpl.n	8001058 <_printf_i+0x144>
 8001046:	6923      	ldr	r3, [r4, #16]
 8001048:	6861      	ldr	r1, [r4, #4]
 800104a:	4299      	cmp	r1, r3
 800104c:	bfde      	ittt	le
 800104e:	2330      	movle	r3, #48	@ 0x30
 8001050:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001054:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001058:	1b92      	subs	r2, r2, r6
 800105a:	6122      	str	r2, [r4, #16]
 800105c:	f8cd a000 	str.w	sl, [sp]
 8001060:	464b      	mov	r3, r9
 8001062:	aa03      	add	r2, sp, #12
 8001064:	4621      	mov	r1, r4
 8001066:	4640      	mov	r0, r8
 8001068:	f7ff fee6 	bl	8000e38 <_printf_common>
 800106c:	3001      	adds	r0, #1
 800106e:	d14a      	bne.n	8001106 <_printf_i+0x1f2>
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	b004      	add	sp, #16
 8001076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	f043 0320 	orr.w	r3, r3, #32
 8001080:	6023      	str	r3, [r4, #0]
 8001082:	4833      	ldr	r0, [pc, #204]	@ (8001150 <_printf_i+0x23c>)
 8001084:	2778      	movs	r7, #120	@ 0x78
 8001086:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	6831      	ldr	r1, [r6, #0]
 800108e:	061f      	lsls	r7, r3, #24
 8001090:	f851 5b04 	ldr.w	r5, [r1], #4
 8001094:	d402      	bmi.n	800109c <_printf_i+0x188>
 8001096:	065f      	lsls	r7, r3, #25
 8001098:	bf48      	it	mi
 800109a:	b2ad      	uxthmi	r5, r5
 800109c:	6031      	str	r1, [r6, #0]
 800109e:	07d9      	lsls	r1, r3, #31
 80010a0:	bf44      	itt	mi
 80010a2:	f043 0320 	orrmi.w	r3, r3, #32
 80010a6:	6023      	strmi	r3, [r4, #0]
 80010a8:	b11d      	cbz	r5, 80010b2 <_printf_i+0x19e>
 80010aa:	2310      	movs	r3, #16
 80010ac:	e7ac      	b.n	8001008 <_printf_i+0xf4>
 80010ae:	4827      	ldr	r0, [pc, #156]	@ (800114c <_printf_i+0x238>)
 80010b0:	e7e9      	b.n	8001086 <_printf_i+0x172>
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	f023 0320 	bic.w	r3, r3, #32
 80010b8:	6023      	str	r3, [r4, #0]
 80010ba:	e7f6      	b.n	80010aa <_printf_i+0x196>
 80010bc:	4616      	mov	r6, r2
 80010be:	e7bd      	b.n	800103c <_printf_i+0x128>
 80010c0:	6833      	ldr	r3, [r6, #0]
 80010c2:	6825      	ldr	r5, [r4, #0]
 80010c4:	6961      	ldr	r1, [r4, #20]
 80010c6:	1d18      	adds	r0, r3, #4
 80010c8:	6030      	str	r0, [r6, #0]
 80010ca:	062e      	lsls	r6, r5, #24
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	d501      	bpl.n	80010d4 <_printf_i+0x1c0>
 80010d0:	6019      	str	r1, [r3, #0]
 80010d2:	e002      	b.n	80010da <_printf_i+0x1c6>
 80010d4:	0668      	lsls	r0, r5, #25
 80010d6:	d5fb      	bpl.n	80010d0 <_printf_i+0x1bc>
 80010d8:	8019      	strh	r1, [r3, #0]
 80010da:	2300      	movs	r3, #0
 80010dc:	6123      	str	r3, [r4, #16]
 80010de:	4616      	mov	r6, r2
 80010e0:	e7bc      	b.n	800105c <_printf_i+0x148>
 80010e2:	6833      	ldr	r3, [r6, #0]
 80010e4:	1d1a      	adds	r2, r3, #4
 80010e6:	6032      	str	r2, [r6, #0]
 80010e8:	681e      	ldr	r6, [r3, #0]
 80010ea:	6862      	ldr	r2, [r4, #4]
 80010ec:	2100      	movs	r1, #0
 80010ee:	4630      	mov	r0, r6
 80010f0:	f7ff f86e 	bl	80001d0 <memchr>
 80010f4:	b108      	cbz	r0, 80010fa <_printf_i+0x1e6>
 80010f6:	1b80      	subs	r0, r0, r6
 80010f8:	6060      	str	r0, [r4, #4]
 80010fa:	6863      	ldr	r3, [r4, #4]
 80010fc:	6123      	str	r3, [r4, #16]
 80010fe:	2300      	movs	r3, #0
 8001100:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001104:	e7aa      	b.n	800105c <_printf_i+0x148>
 8001106:	6923      	ldr	r3, [r4, #16]
 8001108:	4632      	mov	r2, r6
 800110a:	4649      	mov	r1, r9
 800110c:	4640      	mov	r0, r8
 800110e:	47d0      	blx	sl
 8001110:	3001      	adds	r0, #1
 8001112:	d0ad      	beq.n	8001070 <_printf_i+0x15c>
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	079b      	lsls	r3, r3, #30
 8001118:	d413      	bmi.n	8001142 <_printf_i+0x22e>
 800111a:	68e0      	ldr	r0, [r4, #12]
 800111c:	9b03      	ldr	r3, [sp, #12]
 800111e:	4298      	cmp	r0, r3
 8001120:	bfb8      	it	lt
 8001122:	4618      	movlt	r0, r3
 8001124:	e7a6      	b.n	8001074 <_printf_i+0x160>
 8001126:	2301      	movs	r3, #1
 8001128:	4632      	mov	r2, r6
 800112a:	4649      	mov	r1, r9
 800112c:	4640      	mov	r0, r8
 800112e:	47d0      	blx	sl
 8001130:	3001      	adds	r0, #1
 8001132:	d09d      	beq.n	8001070 <_printf_i+0x15c>
 8001134:	3501      	adds	r5, #1
 8001136:	68e3      	ldr	r3, [r4, #12]
 8001138:	9903      	ldr	r1, [sp, #12]
 800113a:	1a5b      	subs	r3, r3, r1
 800113c:	42ab      	cmp	r3, r5
 800113e:	dcf2      	bgt.n	8001126 <_printf_i+0x212>
 8001140:	e7eb      	b.n	800111a <_printf_i+0x206>
 8001142:	2500      	movs	r5, #0
 8001144:	f104 0619 	add.w	r6, r4, #25
 8001148:	e7f5      	b.n	8001136 <_printf_i+0x222>
 800114a:	bf00      	nop
 800114c:	08001536 	.word	0x08001536
 8001150:	08001547 	.word	0x08001547

08001154 <__sflush_r>:
 8001154:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800115c:	0716      	lsls	r6, r2, #28
 800115e:	4605      	mov	r5, r0
 8001160:	460c      	mov	r4, r1
 8001162:	d454      	bmi.n	800120e <__sflush_r+0xba>
 8001164:	684b      	ldr	r3, [r1, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	dc02      	bgt.n	8001170 <__sflush_r+0x1c>
 800116a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800116c:	2b00      	cmp	r3, #0
 800116e:	dd48      	ble.n	8001202 <__sflush_r+0xae>
 8001170:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001172:	2e00      	cmp	r6, #0
 8001174:	d045      	beq.n	8001202 <__sflush_r+0xae>
 8001176:	2300      	movs	r3, #0
 8001178:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800117c:	682f      	ldr	r7, [r5, #0]
 800117e:	6a21      	ldr	r1, [r4, #32]
 8001180:	602b      	str	r3, [r5, #0]
 8001182:	d030      	beq.n	80011e6 <__sflush_r+0x92>
 8001184:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001186:	89a3      	ldrh	r3, [r4, #12]
 8001188:	0759      	lsls	r1, r3, #29
 800118a:	d505      	bpl.n	8001198 <__sflush_r+0x44>
 800118c:	6863      	ldr	r3, [r4, #4]
 800118e:	1ad2      	subs	r2, r2, r3
 8001190:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001192:	b10b      	cbz	r3, 8001198 <__sflush_r+0x44>
 8001194:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001196:	1ad2      	subs	r2, r2, r3
 8001198:	2300      	movs	r3, #0
 800119a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800119c:	6a21      	ldr	r1, [r4, #32]
 800119e:	4628      	mov	r0, r5
 80011a0:	47b0      	blx	r6
 80011a2:	1c43      	adds	r3, r0, #1
 80011a4:	89a3      	ldrh	r3, [r4, #12]
 80011a6:	d106      	bne.n	80011b6 <__sflush_r+0x62>
 80011a8:	6829      	ldr	r1, [r5, #0]
 80011aa:	291d      	cmp	r1, #29
 80011ac:	d82b      	bhi.n	8001206 <__sflush_r+0xb2>
 80011ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001258 <__sflush_r+0x104>)
 80011b0:	410a      	asrs	r2, r1
 80011b2:	07d6      	lsls	r6, r2, #31
 80011b4:	d427      	bmi.n	8001206 <__sflush_r+0xb2>
 80011b6:	2200      	movs	r2, #0
 80011b8:	6062      	str	r2, [r4, #4]
 80011ba:	04d9      	lsls	r1, r3, #19
 80011bc:	6922      	ldr	r2, [r4, #16]
 80011be:	6022      	str	r2, [r4, #0]
 80011c0:	d504      	bpl.n	80011cc <__sflush_r+0x78>
 80011c2:	1c42      	adds	r2, r0, #1
 80011c4:	d101      	bne.n	80011ca <__sflush_r+0x76>
 80011c6:	682b      	ldr	r3, [r5, #0]
 80011c8:	b903      	cbnz	r3, 80011cc <__sflush_r+0x78>
 80011ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80011cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011ce:	602f      	str	r7, [r5, #0]
 80011d0:	b1b9      	cbz	r1, 8001202 <__sflush_r+0xae>
 80011d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011d6:	4299      	cmp	r1, r3
 80011d8:	d002      	beq.n	80011e0 <__sflush_r+0x8c>
 80011da:	4628      	mov	r0, r5
 80011dc:	f7ff fbf2 	bl	80009c4 <_free_r>
 80011e0:	2300      	movs	r3, #0
 80011e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80011e4:	e00d      	b.n	8001202 <__sflush_r+0xae>
 80011e6:	2301      	movs	r3, #1
 80011e8:	4628      	mov	r0, r5
 80011ea:	47b0      	blx	r6
 80011ec:	4602      	mov	r2, r0
 80011ee:	1c50      	adds	r0, r2, #1
 80011f0:	d1c9      	bne.n	8001186 <__sflush_r+0x32>
 80011f2:	682b      	ldr	r3, [r5, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0c6      	beq.n	8001186 <__sflush_r+0x32>
 80011f8:	2b1d      	cmp	r3, #29
 80011fa:	d001      	beq.n	8001200 <__sflush_r+0xac>
 80011fc:	2b16      	cmp	r3, #22
 80011fe:	d11e      	bne.n	800123e <__sflush_r+0xea>
 8001200:	602f      	str	r7, [r5, #0]
 8001202:	2000      	movs	r0, #0
 8001204:	e022      	b.n	800124c <__sflush_r+0xf8>
 8001206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800120a:	b21b      	sxth	r3, r3
 800120c:	e01b      	b.n	8001246 <__sflush_r+0xf2>
 800120e:	690f      	ldr	r7, [r1, #16]
 8001210:	2f00      	cmp	r7, #0
 8001212:	d0f6      	beq.n	8001202 <__sflush_r+0xae>
 8001214:	0793      	lsls	r3, r2, #30
 8001216:	680e      	ldr	r6, [r1, #0]
 8001218:	bf08      	it	eq
 800121a:	694b      	ldreq	r3, [r1, #20]
 800121c:	600f      	str	r7, [r1, #0]
 800121e:	bf18      	it	ne
 8001220:	2300      	movne	r3, #0
 8001222:	eba6 0807 	sub.w	r8, r6, r7
 8001226:	608b      	str	r3, [r1, #8]
 8001228:	f1b8 0f00 	cmp.w	r8, #0
 800122c:	dde9      	ble.n	8001202 <__sflush_r+0xae>
 800122e:	6a21      	ldr	r1, [r4, #32]
 8001230:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001232:	4643      	mov	r3, r8
 8001234:	463a      	mov	r2, r7
 8001236:	4628      	mov	r0, r5
 8001238:	47b0      	blx	r6
 800123a:	2800      	cmp	r0, #0
 800123c:	dc08      	bgt.n	8001250 <__sflush_r+0xfc>
 800123e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001246:	81a3      	strh	r3, [r4, #12]
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001250:	4407      	add	r7, r0
 8001252:	eba8 0800 	sub.w	r8, r8, r0
 8001256:	e7e7      	b.n	8001228 <__sflush_r+0xd4>
 8001258:	dfbffffe 	.word	0xdfbffffe

0800125c <_fflush_r>:
 800125c:	b538      	push	{r3, r4, r5, lr}
 800125e:	690b      	ldr	r3, [r1, #16]
 8001260:	4605      	mov	r5, r0
 8001262:	460c      	mov	r4, r1
 8001264:	b913      	cbnz	r3, 800126c <_fflush_r+0x10>
 8001266:	2500      	movs	r5, #0
 8001268:	4628      	mov	r0, r5
 800126a:	bd38      	pop	{r3, r4, r5, pc}
 800126c:	b118      	cbz	r0, 8001276 <_fflush_r+0x1a>
 800126e:	6a03      	ldr	r3, [r0, #32]
 8001270:	b90b      	cbnz	r3, 8001276 <_fflush_r+0x1a>
 8001272:	f7ff fa9f 	bl	80007b4 <__sinit>
 8001276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f3      	beq.n	8001266 <_fflush_r+0xa>
 800127e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001280:	07d0      	lsls	r0, r2, #31
 8001282:	d404      	bmi.n	800128e <_fflush_r+0x32>
 8001284:	0599      	lsls	r1, r3, #22
 8001286:	d402      	bmi.n	800128e <_fflush_r+0x32>
 8001288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800128a:	f7ff fb98 	bl	80009be <__retarget_lock_acquire_recursive>
 800128e:	4628      	mov	r0, r5
 8001290:	4621      	mov	r1, r4
 8001292:	f7ff ff5f 	bl	8001154 <__sflush_r>
 8001296:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001298:	07da      	lsls	r2, r3, #31
 800129a:	4605      	mov	r5, r0
 800129c:	d4e4      	bmi.n	8001268 <_fflush_r+0xc>
 800129e:	89a3      	ldrh	r3, [r4, #12]
 80012a0:	059b      	lsls	r3, r3, #22
 80012a2:	d4e1      	bmi.n	8001268 <_fflush_r+0xc>
 80012a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012a6:	f7ff fb8b 	bl	80009c0 <__retarget_lock_release_recursive>
 80012aa:	e7dd      	b.n	8001268 <_fflush_r+0xc>

080012ac <__swbuf_r>:
 80012ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ae:	460e      	mov	r6, r1
 80012b0:	4614      	mov	r4, r2
 80012b2:	4605      	mov	r5, r0
 80012b4:	b118      	cbz	r0, 80012be <__swbuf_r+0x12>
 80012b6:	6a03      	ldr	r3, [r0, #32]
 80012b8:	b90b      	cbnz	r3, 80012be <__swbuf_r+0x12>
 80012ba:	f7ff fa7b 	bl	80007b4 <__sinit>
 80012be:	69a3      	ldr	r3, [r4, #24]
 80012c0:	60a3      	str	r3, [r4, #8]
 80012c2:	89a3      	ldrh	r3, [r4, #12]
 80012c4:	071a      	lsls	r2, r3, #28
 80012c6:	d501      	bpl.n	80012cc <__swbuf_r+0x20>
 80012c8:	6923      	ldr	r3, [r4, #16]
 80012ca:	b943      	cbnz	r3, 80012de <__swbuf_r+0x32>
 80012cc:	4621      	mov	r1, r4
 80012ce:	4628      	mov	r0, r5
 80012d0:	f000 f82a 	bl	8001328 <__swsetup_r>
 80012d4:	b118      	cbz	r0, 80012de <__swbuf_r+0x32>
 80012d6:	f04f 37ff 	mov.w	r7, #4294967295
 80012da:	4638      	mov	r0, r7
 80012dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	6922      	ldr	r2, [r4, #16]
 80012e2:	1a98      	subs	r0, r3, r2
 80012e4:	6963      	ldr	r3, [r4, #20]
 80012e6:	b2f6      	uxtb	r6, r6
 80012e8:	4283      	cmp	r3, r0
 80012ea:	4637      	mov	r7, r6
 80012ec:	dc05      	bgt.n	80012fa <__swbuf_r+0x4e>
 80012ee:	4621      	mov	r1, r4
 80012f0:	4628      	mov	r0, r5
 80012f2:	f7ff ffb3 	bl	800125c <_fflush_r>
 80012f6:	2800      	cmp	r0, #0
 80012f8:	d1ed      	bne.n	80012d6 <__swbuf_r+0x2a>
 80012fa:	68a3      	ldr	r3, [r4, #8]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	60a3      	str	r3, [r4, #8]
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	6022      	str	r2, [r4, #0]
 8001306:	701e      	strb	r6, [r3, #0]
 8001308:	6962      	ldr	r2, [r4, #20]
 800130a:	1c43      	adds	r3, r0, #1
 800130c:	429a      	cmp	r2, r3
 800130e:	d004      	beq.n	800131a <__swbuf_r+0x6e>
 8001310:	89a3      	ldrh	r3, [r4, #12]
 8001312:	07db      	lsls	r3, r3, #31
 8001314:	d5e1      	bpl.n	80012da <__swbuf_r+0x2e>
 8001316:	2e0a      	cmp	r6, #10
 8001318:	d1df      	bne.n	80012da <__swbuf_r+0x2e>
 800131a:	4621      	mov	r1, r4
 800131c:	4628      	mov	r0, r5
 800131e:	f7ff ff9d 	bl	800125c <_fflush_r>
 8001322:	2800      	cmp	r0, #0
 8001324:	d0d9      	beq.n	80012da <__swbuf_r+0x2e>
 8001326:	e7d6      	b.n	80012d6 <__swbuf_r+0x2a>

08001328 <__swsetup_r>:
 8001328:	b538      	push	{r3, r4, r5, lr}
 800132a:	4b29      	ldr	r3, [pc, #164]	@ (80013d0 <__swsetup_r+0xa8>)
 800132c:	4605      	mov	r5, r0
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	460c      	mov	r4, r1
 8001332:	b118      	cbz	r0, 800133c <__swsetup_r+0x14>
 8001334:	6a03      	ldr	r3, [r0, #32]
 8001336:	b90b      	cbnz	r3, 800133c <__swsetup_r+0x14>
 8001338:	f7ff fa3c 	bl	80007b4 <__sinit>
 800133c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001340:	0719      	lsls	r1, r3, #28
 8001342:	d422      	bmi.n	800138a <__swsetup_r+0x62>
 8001344:	06da      	lsls	r2, r3, #27
 8001346:	d407      	bmi.n	8001358 <__swsetup_r+0x30>
 8001348:	2209      	movs	r2, #9
 800134a:	602a      	str	r2, [r5, #0]
 800134c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001350:	81a3      	strh	r3, [r4, #12]
 8001352:	f04f 30ff 	mov.w	r0, #4294967295
 8001356:	e033      	b.n	80013c0 <__swsetup_r+0x98>
 8001358:	0758      	lsls	r0, r3, #29
 800135a:	d512      	bpl.n	8001382 <__swsetup_r+0x5a>
 800135c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800135e:	b141      	cbz	r1, 8001372 <__swsetup_r+0x4a>
 8001360:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001364:	4299      	cmp	r1, r3
 8001366:	d002      	beq.n	800136e <__swsetup_r+0x46>
 8001368:	4628      	mov	r0, r5
 800136a:	f7ff fb2b 	bl	80009c4 <_free_r>
 800136e:	2300      	movs	r3, #0
 8001370:	6363      	str	r3, [r4, #52]	@ 0x34
 8001372:	89a3      	ldrh	r3, [r4, #12]
 8001374:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001378:	81a3      	strh	r3, [r4, #12]
 800137a:	2300      	movs	r3, #0
 800137c:	6063      	str	r3, [r4, #4]
 800137e:	6923      	ldr	r3, [r4, #16]
 8001380:	6023      	str	r3, [r4, #0]
 8001382:	89a3      	ldrh	r3, [r4, #12]
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	81a3      	strh	r3, [r4, #12]
 800138a:	6923      	ldr	r3, [r4, #16]
 800138c:	b94b      	cbnz	r3, 80013a2 <__swsetup_r+0x7a>
 800138e:	89a3      	ldrh	r3, [r4, #12]
 8001390:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001398:	d003      	beq.n	80013a2 <__swsetup_r+0x7a>
 800139a:	4621      	mov	r1, r4
 800139c:	4628      	mov	r0, r5
 800139e:	f000 f84f 	bl	8001440 <__smakebuf_r>
 80013a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013a6:	f013 0201 	ands.w	r2, r3, #1
 80013aa:	d00a      	beq.n	80013c2 <__swsetup_r+0x9a>
 80013ac:	2200      	movs	r2, #0
 80013ae:	60a2      	str	r2, [r4, #8]
 80013b0:	6962      	ldr	r2, [r4, #20]
 80013b2:	4252      	negs	r2, r2
 80013b4:	61a2      	str	r2, [r4, #24]
 80013b6:	6922      	ldr	r2, [r4, #16]
 80013b8:	b942      	cbnz	r2, 80013cc <__swsetup_r+0xa4>
 80013ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80013be:	d1c5      	bne.n	800134c <__swsetup_r+0x24>
 80013c0:	bd38      	pop	{r3, r4, r5, pc}
 80013c2:	0799      	lsls	r1, r3, #30
 80013c4:	bf58      	it	pl
 80013c6:	6962      	ldrpl	r2, [r4, #20]
 80013c8:	60a2      	str	r2, [r4, #8]
 80013ca:	e7f4      	b.n	80013b6 <__swsetup_r+0x8e>
 80013cc:	2000      	movs	r0, #0
 80013ce:	e7f7      	b.n	80013c0 <__swsetup_r+0x98>
 80013d0:	2000000c 	.word	0x2000000c

080013d4 <_sbrk_r>:
 80013d4:	b538      	push	{r3, r4, r5, lr}
 80013d6:	4d06      	ldr	r5, [pc, #24]	@ (80013f0 <_sbrk_r+0x1c>)
 80013d8:	2300      	movs	r3, #0
 80013da:	4604      	mov	r4, r0
 80013dc:	4608      	mov	r0, r1
 80013de:	602b      	str	r3, [r5, #0]
 80013e0:	f7ff f866 	bl	80004b0 <_sbrk>
 80013e4:	1c43      	adds	r3, r0, #1
 80013e6:	d102      	bne.n	80013ee <_sbrk_r+0x1a>
 80013e8:	682b      	ldr	r3, [r5, #0]
 80013ea:	b103      	cbz	r3, 80013ee <_sbrk_r+0x1a>
 80013ec:	6023      	str	r3, [r4, #0]
 80013ee:	bd38      	pop	{r3, r4, r5, pc}
 80013f0:	200001b8 	.word	0x200001b8

080013f4 <__swhatbuf_r>:
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	460c      	mov	r4, r1
 80013f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013fc:	2900      	cmp	r1, #0
 80013fe:	b096      	sub	sp, #88	@ 0x58
 8001400:	4615      	mov	r5, r2
 8001402:	461e      	mov	r6, r3
 8001404:	da0d      	bge.n	8001422 <__swhatbuf_r+0x2e>
 8001406:	89a3      	ldrh	r3, [r4, #12]
 8001408:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800140c:	f04f 0100 	mov.w	r1, #0
 8001410:	bf14      	ite	ne
 8001412:	2340      	movne	r3, #64	@ 0x40
 8001414:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001418:	2000      	movs	r0, #0
 800141a:	6031      	str	r1, [r6, #0]
 800141c:	602b      	str	r3, [r5, #0]
 800141e:	b016      	add	sp, #88	@ 0x58
 8001420:	bd70      	pop	{r4, r5, r6, pc}
 8001422:	466a      	mov	r2, sp
 8001424:	f000 f848 	bl	80014b8 <_fstat_r>
 8001428:	2800      	cmp	r0, #0
 800142a:	dbec      	blt.n	8001406 <__swhatbuf_r+0x12>
 800142c:	9901      	ldr	r1, [sp, #4]
 800142e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001432:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001436:	4259      	negs	r1, r3
 8001438:	4159      	adcs	r1, r3
 800143a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800143e:	e7eb      	b.n	8001418 <__swhatbuf_r+0x24>

08001440 <__smakebuf_r>:
 8001440:	898b      	ldrh	r3, [r1, #12]
 8001442:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001444:	079d      	lsls	r5, r3, #30
 8001446:	4606      	mov	r6, r0
 8001448:	460c      	mov	r4, r1
 800144a:	d507      	bpl.n	800145c <__smakebuf_r+0x1c>
 800144c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001450:	6023      	str	r3, [r4, #0]
 8001452:	6123      	str	r3, [r4, #16]
 8001454:	2301      	movs	r3, #1
 8001456:	6163      	str	r3, [r4, #20]
 8001458:	b003      	add	sp, #12
 800145a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145c:	ab01      	add	r3, sp, #4
 800145e:	466a      	mov	r2, sp
 8001460:	f7ff ffc8 	bl	80013f4 <__swhatbuf_r>
 8001464:	9f00      	ldr	r7, [sp, #0]
 8001466:	4605      	mov	r5, r0
 8001468:	4639      	mov	r1, r7
 800146a:	4630      	mov	r0, r6
 800146c:	f7ff fb16 	bl	8000a9c <_malloc_r>
 8001470:	b948      	cbnz	r0, 8001486 <__smakebuf_r+0x46>
 8001472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001476:	059a      	lsls	r2, r3, #22
 8001478:	d4ee      	bmi.n	8001458 <__smakebuf_r+0x18>
 800147a:	f023 0303 	bic.w	r3, r3, #3
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	81a3      	strh	r3, [r4, #12]
 8001484:	e7e2      	b.n	800144c <__smakebuf_r+0xc>
 8001486:	89a3      	ldrh	r3, [r4, #12]
 8001488:	6020      	str	r0, [r4, #0]
 800148a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800148e:	81a3      	strh	r3, [r4, #12]
 8001490:	9b01      	ldr	r3, [sp, #4]
 8001492:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001496:	b15b      	cbz	r3, 80014b0 <__smakebuf_r+0x70>
 8001498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800149c:	4630      	mov	r0, r6
 800149e:	f000 f81d 	bl	80014dc <_isatty_r>
 80014a2:	b128      	cbz	r0, 80014b0 <__smakebuf_r+0x70>
 80014a4:	89a3      	ldrh	r3, [r4, #12]
 80014a6:	f023 0303 	bic.w	r3, r3, #3
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	81a3      	strh	r3, [r4, #12]
 80014b0:	89a3      	ldrh	r3, [r4, #12]
 80014b2:	431d      	orrs	r5, r3
 80014b4:	81a5      	strh	r5, [r4, #12]
 80014b6:	e7cf      	b.n	8001458 <__smakebuf_r+0x18>

080014b8 <_fstat_r>:
 80014b8:	b538      	push	{r3, r4, r5, lr}
 80014ba:	4d07      	ldr	r5, [pc, #28]	@ (80014d8 <_fstat_r+0x20>)
 80014bc:	2300      	movs	r3, #0
 80014be:	4604      	mov	r4, r0
 80014c0:	4608      	mov	r0, r1
 80014c2:	4611      	mov	r1, r2
 80014c4:	602b      	str	r3, [r5, #0]
 80014c6:	f7fe ffca 	bl	800045e <_fstat>
 80014ca:	1c43      	adds	r3, r0, #1
 80014cc:	d102      	bne.n	80014d4 <_fstat_r+0x1c>
 80014ce:	682b      	ldr	r3, [r5, #0]
 80014d0:	b103      	cbz	r3, 80014d4 <_fstat_r+0x1c>
 80014d2:	6023      	str	r3, [r4, #0]
 80014d4:	bd38      	pop	{r3, r4, r5, pc}
 80014d6:	bf00      	nop
 80014d8:	200001b8 	.word	0x200001b8

080014dc <_isatty_r>:
 80014dc:	b538      	push	{r3, r4, r5, lr}
 80014de:	4d06      	ldr	r5, [pc, #24]	@ (80014f8 <_isatty_r+0x1c>)
 80014e0:	2300      	movs	r3, #0
 80014e2:	4604      	mov	r4, r0
 80014e4:	4608      	mov	r0, r1
 80014e6:	602b      	str	r3, [r5, #0]
 80014e8:	f7fe ffc9 	bl	800047e <_isatty>
 80014ec:	1c43      	adds	r3, r0, #1
 80014ee:	d102      	bne.n	80014f6 <_isatty_r+0x1a>
 80014f0:	682b      	ldr	r3, [r5, #0]
 80014f2:	b103      	cbz	r3, 80014f6 <_isatty_r+0x1a>
 80014f4:	6023      	str	r3, [r4, #0]
 80014f6:	bd38      	pop	{r3, r4, r5, pc}
 80014f8:	200001b8 	.word	0x200001b8

080014fc <_init>:
 80014fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fe:	bf00      	nop
 8001500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001502:	bc08      	pop	{r3}
 8001504:	469e      	mov	lr, r3
 8001506:	4770      	bx	lr

08001508 <_fini>:
 8001508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150a:	bf00      	nop
 800150c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800150e:	bc08      	pop	{r3}
 8001510:	469e      	mov	lr, r3
 8001512:	4770      	bx	lr
