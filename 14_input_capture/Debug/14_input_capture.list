
14_input_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000264  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ec  080003f4  000013f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ec  080003ec  000013f4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ec  080003ec  000013f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ec  080003f4  000013f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ec  080003ec  000013ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003f0  080003f0  000013f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000013f4  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000608  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001a6  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00001bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004d  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000e87  00000000  00000000  00001c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000e46  00000000  00000000  00002b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bf36  00000000  00000000  0000396a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008f8a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c8  00000000  00000000  0008f8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0008f9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003d4 	.word	0x080003d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080003d4 	.word	0x080003d4

080001c8 <main>:
#include "tim.h"
//PA6 AF2

int timestamp = 0;
//set up: connect a jumper wire from pa15 to pa6
int main() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	tim2_PA15_output_compare();
 80001cc:	f000 f814 	bl	80001f8 <tim2_PA15_output_compare>
	tim3_PA6_input_compare();
 80001d0:	f000 f868 	bl	80002a4 <tim3_PA6_input_compare>

	while (1) {
		//Wait until edge is captured
		while(!(TIM2->SR  & SR_CC1IF)){}
 80001d4:	bf00      	nop
 80001d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001da:	691b      	ldr	r3, [r3, #16]
 80001dc:	f003 0301 	and.w	r3, r3, #1
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d0f8      	beq.n	80001d6 <main+0xe>
		//Read value
		timestamp = TIM3->CCR1;
 80001e4:	4b02      	ldr	r3, [pc, #8]	@ (80001f0 <main+0x28>)
 80001e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80001e8:	461a      	mov	r2, r3
 80001ea:	4b02      	ldr	r3, [pc, #8]	@ (80001f4 <main+0x2c>)
 80001ec:	601a      	str	r2, [r3, #0]
		while(!(TIM2->SR  & SR_CC1IF)){}
 80001ee:	e7f1      	b.n	80001d4 <main+0xc>
 80001f0:	40000400 	.word	0x40000400
 80001f4:	2000001c 	.word	0x2000001c

080001f8 <tim2_PA15_output_compare>:
	TIM2->CNT = 0;
	//Enable timer
	TIM2->CR1 = CR1_EN;
}

void tim2_PA15_output_compare(){
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
	//Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80001fc:	4b27      	ldr	r3, [pc, #156]	@ (800029c <tim2_PA15_output_compare+0xa4>)
 80001fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000200:	4a26      	ldr	r2, [pc, #152]	@ (800029c <tim2_PA15_output_compare+0xa4>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6313      	str	r3, [r2, #48]	@ 0x30
	//Set PA15 to alternate function
	GPIOA->MODER &=~(1U<<30);
 8000208:	4b25      	ldr	r3, [pc, #148]	@ (80002a0 <tim2_PA15_output_compare+0xa8>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a24      	ldr	r2, [pc, #144]	@ (80002a0 <tim2_PA15_output_compare+0xa8>)
 800020e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000212:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<31);
 8000214:	4b22      	ldr	r3, [pc, #136]	@ (80002a0 <tim2_PA15_output_compare+0xa8>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a21      	ldr	r2, [pc, #132]	@ (80002a0 <tim2_PA15_output_compare+0xa8>)
 800021a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800021e:	6013      	str	r3, [r2, #0]
	//Set PA15 alternate function type to TIM2_CH1 (AF1)
	GPIOA->AFR[1] |= (1U<<28);
 8000220:	4b1f      	ldr	r3, [pc, #124]	@ (80002a0 <tim2_PA15_output_compare+0xa8>)
 8000222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000224:	4a1e      	ldr	r2, [pc, #120]	@ (80002a0 <tim2_PA15_output_compare+0xa8>)
 8000226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800022a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] &= ~(1U<<29);
 800022c:	4b1c      	ldr	r3, [pc, #112]	@ (80002a0 <tim2_PA15_output_compare+0xa8>)
 800022e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000230:	4a1b      	ldr	r2, [pc, #108]	@ (80002a0 <tim2_PA15_output_compare+0xa8>)
 8000232:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000236:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] &= ~(1U<<30);
 8000238:	4b19      	ldr	r3, [pc, #100]	@ (80002a0 <tim2_PA15_output_compare+0xa8>)
 800023a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800023c:	4a18      	ldr	r2, [pc, #96]	@ (80002a0 <tim2_PA15_output_compare+0xa8>)
 800023e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000242:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] &= ~(1U<<31);
 8000244:	4b16      	ldr	r3, [pc, #88]	@ (80002a0 <tim2_PA15_output_compare+0xa8>)
 8000246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000248:	4a15      	ldr	r2, [pc, #84]	@ (80002a0 <tim2_PA15_output_compare+0xa8>)
 800024a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800024e:	6253      	str	r3, [r2, #36]	@ 0x24
	//Enable clock access to Timer 2
	RCC->APB1ENR |= TIM2EN;
 8000250:	4b12      	ldr	r3, [pc, #72]	@ (800029c <tim2_PA15_output_compare+0xa4>)
 8000252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000254:	4a11      	ldr	r2, [pc, #68]	@ (800029c <tim2_PA15_output_compare+0xa4>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6413      	str	r3, [r2, #64]	@ 0x40
	//Set prescaler value
	TIM2->PSC = 1600-1; 		//	16 000 000/1600 = 10 000
 800025c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000260:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000264:	629a      	str	r2, [r3, #40]	@ 0x28
	//Set auto reload value
	TIM2->ARR = 10000-1;		// 10 000/ 10 000 = 1
 8000266:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800026a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800026e:	62da      	str	r2, [r3, #44]	@ 0x2c
	//Set output compare toggle mode
	TIM2->CCMR1 = OC_TOGGLE;
 8000270:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000274:	2230      	movs	r2, #48	@ 0x30
 8000276:	619a      	str	r2, [r3, #24]
	//Enable timer 2 ch 1 in compare mode
	TIM2->CCER = OC_ENABLE;
 8000278:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800027c:	2201      	movs	r2, #1
 800027e:	621a      	str	r2, [r3, #32]
	//Clear counter
	TIM2->CNT = 0;
 8000280:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000284:	2200      	movs	r2, #0
 8000286:	625a      	str	r2, [r3, #36]	@ 0x24
	//Enable timer
	TIM2->CR1 = CR1_EN;
 8000288:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800028c:	2201      	movs	r2, #1
 800028e:	601a      	str	r2, [r3, #0]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020000 	.word	0x40020000

080002a4 <tim3_PA6_input_compare>:

void tim3_PA6_input_compare(){
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
	//Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80002a8:	4b20      	ldr	r3, [pc, #128]	@ (800032c <tim3_PA6_input_compare+0x88>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ac:	4a1f      	ldr	r2, [pc, #124]	@ (800032c <tim3_PA6_input_compare+0x88>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6313      	str	r3, [r2, #48]	@ 0x30
	//Set PA6 to alternate function
	GPIOA->MODER &=~(1U<<12);
 80002b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000330 <tim3_PA6_input_compare+0x8c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000330 <tim3_PA6_input_compare+0x8c>)
 80002ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80002be:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<13);
 80002c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000330 <tim3_PA6_input_compare+0x8c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000330 <tim3_PA6_input_compare+0x8c>)
 80002c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002ca:	6013      	str	r3, [r2, #0]
	//Set PA6 alternate function type to TIM3_CH1 (AF2)
	GPIOA->AFR[0] &= ~(1U<<24);
 80002cc:	4b18      	ldr	r3, [pc, #96]	@ (8000330 <tim3_PA6_input_compare+0x8c>)
 80002ce:	6a1b      	ldr	r3, [r3, #32]
 80002d0:	4a17      	ldr	r2, [pc, #92]	@ (8000330 <tim3_PA6_input_compare+0x8c>)
 80002d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80002d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<25);
 80002d8:	4b15      	ldr	r3, [pc, #84]	@ (8000330 <tim3_PA6_input_compare+0x8c>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a14      	ldr	r2, [pc, #80]	@ (8000330 <tim3_PA6_input_compare+0x8c>)
 80002de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<26);
 80002e4:	4b12      	ldr	r3, [pc, #72]	@ (8000330 <tim3_PA6_input_compare+0x8c>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a11      	ldr	r2, [pc, #68]	@ (8000330 <tim3_PA6_input_compare+0x8c>)
 80002ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80002ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<27);
 80002f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000330 <tim3_PA6_input_compare+0x8c>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000330 <tim3_PA6_input_compare+0x8c>)
 80002f6:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80002fa:	6213      	str	r3, [r2, #32]
	//Enable clock access to Timer 3
	RCC->APB1ENR |= TIM3EN;
 80002fc:	4b0b      	ldr	r3, [pc, #44]	@ (800032c <tim3_PA6_input_compare+0x88>)
 80002fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000300:	4a0a      	ldr	r2, [pc, #40]	@ (800032c <tim3_PA6_input_compare+0x88>)
 8000302:	f043 0302 	orr.w	r3, r3, #2
 8000306:	6413      	str	r3, [r2, #64]	@ 0x40
	//Set prescaler value
	TIM3->PSC = 16000-1; 		//	16 000 000/16000
 8000308:	4b0a      	ldr	r3, [pc, #40]	@ (8000334 <tim3_PA6_input_compare+0x90>)
 800030a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800030e:	629a      	str	r2, [r3, #40]	@ 0x28
	//Set ch1 to capture at every edge
	TIM3->CCMR1 = CCER_CCIS;
 8000310:	4b08      	ldr	r3, [pc, #32]	@ (8000334 <tim3_PA6_input_compare+0x90>)
 8000312:	2201      	movs	r2, #1
 8000314:	619a      	str	r2, [r3, #24]
	//Set ch1 to capture at rising edge
	TIM3->CCER = CCER_CCIE;
 8000316:	4b07      	ldr	r3, [pc, #28]	@ (8000334 <tim3_PA6_input_compare+0x90>)
 8000318:	2201      	movs	r2, #1
 800031a:	621a      	str	r2, [r3, #32]
	//Enable timer 3
	TIM3->CR1	= CR1_EN;
 800031c:	4b05      	ldr	r3, [pc, #20]	@ (8000334 <tim3_PA6_input_compare+0x90>)
 800031e:	2201      	movs	r2, #1
 8000320:	601a      	str	r2, [r3, #0]

}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	40023800 	.word	0x40023800
 8000330:	40020000 	.word	0x40020000
 8000334:	40000400 	.word	0x40000400

08000338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000338:	480d      	ldr	r0, [pc, #52]	@ (8000370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800033c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480c      	ldr	r0, [pc, #48]	@ (8000374 <LoopForever+0x6>)
  ldr r1, =_edata
 8000342:	490d      	ldr	r1, [pc, #52]	@ (8000378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000344:	4a0d      	ldr	r2, [pc, #52]	@ (800037c <LoopForever+0xe>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a0a      	ldr	r2, [pc, #40]	@ (8000380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000358:	4c0a      	ldr	r4, [pc, #40]	@ (8000384 <LoopForever+0x16>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000366:	f000 f811 	bl	800038c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff ff2d 	bl	80001c8 <main>

0800036e <LoopForever>:

LoopForever:
  b LoopForever
 800036e:	e7fe      	b.n	800036e <LoopForever>
  ldr   r0, =_estack
 8000370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800037c:	080003f4 	.word	0x080003f4
  ldr r2, =_sbss
 8000380:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000384:	20000020 	.word	0x20000020

08000388 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC_IRQHandler>
	...

0800038c <__libc_init_array>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	4d0d      	ldr	r5, [pc, #52]	@ (80003c4 <__libc_init_array+0x38>)
 8000390:	4c0d      	ldr	r4, [pc, #52]	@ (80003c8 <__libc_init_array+0x3c>)
 8000392:	1b64      	subs	r4, r4, r5
 8000394:	10a4      	asrs	r4, r4, #2
 8000396:	2600      	movs	r6, #0
 8000398:	42a6      	cmp	r6, r4
 800039a:	d109      	bne.n	80003b0 <__libc_init_array+0x24>
 800039c:	4d0b      	ldr	r5, [pc, #44]	@ (80003cc <__libc_init_array+0x40>)
 800039e:	4c0c      	ldr	r4, [pc, #48]	@ (80003d0 <__libc_init_array+0x44>)
 80003a0:	f000 f818 	bl	80003d4 <_init>
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	10a4      	asrs	r4, r4, #2
 80003a8:	2600      	movs	r6, #0
 80003aa:	42a6      	cmp	r6, r4
 80003ac:	d105      	bne.n	80003ba <__libc_init_array+0x2e>
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b4:	4798      	blx	r3
 80003b6:	3601      	adds	r6, #1
 80003b8:	e7ee      	b.n	8000398 <__libc_init_array+0xc>
 80003ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80003be:	4798      	blx	r3
 80003c0:	3601      	adds	r6, #1
 80003c2:	e7f2      	b.n	80003aa <__libc_init_array+0x1e>
 80003c4:	080003ec 	.word	0x080003ec
 80003c8:	080003ec 	.word	0x080003ec
 80003cc:	080003ec 	.word	0x080003ec
 80003d0:	080003f0 	.word	0x080003f0

080003d4 <_init>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr

080003e0 <_fini>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr
